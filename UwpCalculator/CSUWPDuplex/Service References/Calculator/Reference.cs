//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.VisualStudio.ServiceReference.Platforms, version 14.0.23107.0
// 
namespace CSUWPDuplex.CalculatorService
{
    using System.Runtime.Serialization;


    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name = "CalculateData", Namespace = "http://schemas.datacontract.org/2004/07/CalculatorService")]
    public partial class CalculateData : object, System.ComponentModel.INotifyPropertyChanged
    {

        private string MessageField;

        private double Number1Field;

        private double Number2Field;

        private string OperatorField;

        private double ResultField;

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message
        {
            get
            {
                return this.MessageField;
            }
            set
            {
                if ((object.ReferenceEquals(this.MessageField, value) != true))
                {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Number1
        {
            get
            {
                return this.Number1Field;
            }
            set
            {
                if ((this.Number1Field.Equals(value) != true))
                {
                    this.Number1Field = value;
                    this.RaisePropertyChanged("Number1");
                }
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Number2
        {
            get
            {
                return this.Number2Field;
            }
            set
            {
                if ((this.Number2Field.Equals(value) != true))
                {
                    this.Number2Field = value;
                    this.RaisePropertyChanged("Number2");
                }
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Operator
        {
            get
            {
                return this.OperatorField;
            }
            set
            {
                if ((object.ReferenceEquals(this.OperatorField, value) != true))
                {
                    this.OperatorField = value;
                    this.RaisePropertyChanged("Operator");
                }
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Result
        {
            get
            {
                return this.ResultField;
            }
            set
            {
                if ((this.ResultField.Equals(value) != true))
                {
                    this.ResultField = value;
                    this.RaisePropertyChanged("Result");
                }
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected void RaisePropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName = "CalculatorService.ICalculator", CallbackContract = typeof(CSUWPDuplex.CalculatorService.ICalculatorCallback))]
    public interface ICalculator
    {

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/ICalculator/Add", ReplyAction = "http://tempuri.org/ICalculator/AddResponse")]
        System.Threading.Tasks.Task AddAsync(double n1, double n2);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/ICalculator/Subtract", ReplyAction = "http://tempuri.org/ICalculator/SubtractResponse")]
        System.Threading.Tasks.Task SubtractAsync(double n1, double n2);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/ICalculator/Multiply", ReplyAction = "http://tempuri.org/ICalculator/MultiplyResponse")]
        System.Threading.Tasks.Task MultiplyAsync(double n1, double n2);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/ICalculator/Divide", ReplyAction = "http://tempuri.org/ICalculator/DivideResponse")]
        System.Threading.Tasks.Task DivideAsync(double n1, double n2);
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICalculatorCallback
    {

        [System.ServiceModel.OperationContractAttribute(IsOneWay = true, Action = "http://tempuri.org/ICalculator/ReceiveCalculateResult")]
        void ReceiveCalculateResult(CSUWPDuplex.CalculatorService.CalculateData data);
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICalculatorChannel : CSUWPDuplex.CalculatorService.ICalculator, System.ServiceModel.IClientChannel
    {
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CalculatorClientBase : System.ServiceModel.DuplexClientBase<CSUWPDuplex.CalculatorService.ICalculator>, CSUWPDuplex.CalculatorService.ICalculator
    {

        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);

        public CalculatorClientBase(System.ServiceModel.InstanceContext callbackInstance) :
                base(callbackInstance, CalculatorClientBase.GetDefaultBinding(), CalculatorClientBase.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.NetTcpBinding_ICalculator.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }

        public CalculatorClientBase(System.ServiceModel.InstanceContext callbackInstance, EndpointConfiguration endpointConfiguration) :
                base(callbackInstance, CalculatorClientBase.GetBindingForEndpoint(endpointConfiguration), CalculatorClientBase.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }

        public CalculatorClientBase(System.ServiceModel.InstanceContext callbackInstance, EndpointConfiguration endpointConfiguration, string remoteAddress) :
                base(callbackInstance, CalculatorClientBase.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }

        public CalculatorClientBase(System.ServiceModel.InstanceContext callbackInstance, EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) :
                base(callbackInstance, CalculatorClientBase.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }

        public CalculatorClientBase(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) :
                base(callbackInstance, binding, remoteAddress)
        {
        }

        public System.Threading.Tasks.Task AddAsync(double n1, double n2)
        {
            return base.Channel.AddAsync(n1, n2);
        }

        public System.Threading.Tasks.Task SubtractAsync(double n1, double n2)
        {
            return base.Channel.SubtractAsync(n1, n2);
        }

        public System.Threading.Tasks.Task MultiplyAsync(double n1, double n2)
        {
            return base.Channel.MultiplyAsync(n1, n2);
        }

        public System.Threading.Tasks.Task DivideAsync(double n1, double n2)
        {
            return base.Channel.DivideAsync(n1, n2);
        }

        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }

        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }

        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.NetTcpBinding_ICalculator))
            {
                System.ServiceModel.NetTcpBinding result = new System.ServiceModel.NetTcpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.Security.Mode = System.ServiceModel.SecurityMode.None;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }

        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.NetTcpBinding_ICalculator))
            {
                return new System.ServiceModel.EndpointAddress("net.tcp://idt_val_vm_srv:7991/CalculatorService/Calculator/tcp");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }

        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return CalculatorClientBase.GetBindingForEndpoint(EndpointConfiguration.NetTcpBinding_ICalculator);
        }

        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return CalculatorClientBase.GetEndpointAddress(EndpointConfiguration.NetTcpBinding_ICalculator);
        }

        public enum EndpointConfiguration
        {

            NetTcpBinding_ICalculator,
        }
    }

    public class ReceiveCalculateResultReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        public ReceiveCalculateResultReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        public CSUWPDuplex.CalculatorService.CalculateData data
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((CSUWPDuplex.CalculatorService.CalculateData)(this.results[0]));
            }
        }
    }

    public partial class CalculatorClient : CalculatorClientBase
    {

        public CalculatorClient(EndpointConfiguration endpointConfiguration) :
                this(new CalculatorClientCallback(), endpointConfiguration)
        {
        }

        private CalculatorClient(CalculatorClientCallback callbackImpl, EndpointConfiguration endpointConfiguration) :
                base(new System.ServiceModel.InstanceContext(callbackImpl), endpointConfiguration)
        {
            callbackImpl.Initialize(this);
        }

        public CalculatorClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) :
                this(new CalculatorClientCallback(), binding, remoteAddress)
        {
        }

        private CalculatorClient(CalculatorClientCallback callbackImpl, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) :
                base(new System.ServiceModel.InstanceContext(callbackImpl), binding, remoteAddress)
        {
            callbackImpl.Initialize(this);
        }

        public CalculatorClient() :
                this(new CalculatorClientCallback())
        {
        }

        private CalculatorClient(CalculatorClientCallback callbackImpl) :
                base(new System.ServiceModel.InstanceContext(callbackImpl))
        {
            callbackImpl.Initialize(this);
        }

        public event System.EventHandler<ReceiveCalculateResultReceivedEventArgs> ReceiveCalculateResultReceived;

        private void OnReceiveCalculateResultReceived(object state)
        {
            if ((this.ReceiveCalculateResultReceived != null))
            {
                object[] results = ((object[])(state));
                this.ReceiveCalculateResultReceived(this, new ReceiveCalculateResultReceivedEventArgs(results, null, false, null));
            }
        }

        private class CalculatorClientCallback : object, ICalculatorCallback
        {

            private CalculatorClient proxy;

            public void Initialize(CalculatorClient proxy)
            {
                this.proxy = proxy;
            }

            public void ReceiveCalculateResult(CSUWPDuplex.CalculatorService.CalculateData data)
            {
                this.proxy.OnReceiveCalculateResultReceived(new object[] {
                            data});
            }
        }
    }
}
