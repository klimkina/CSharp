#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LicenseManager4Web.DataContext
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="LicenseManager")]
	public partial class LicenseManagerClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertActivation(LicenseManager4Web.Entities.Activation instance);
    partial void UpdateActivation(LicenseManager4Web.Entities.Activation instance);
    partial void DeleteActivation(LicenseManager4Web.Entities.Activation instance);
    partial void InsertClient(LicenseManager4Web.Entities.Client instance);
    partial void UpdateClient(LicenseManager4Web.Entities.Client instance);
    partial void DeleteClient(LicenseManager4Web.Entities.Client instance);
    partial void InsertSite(LicenseManager4Web.Entities.Site instance);
    partial void UpdateSite(LicenseManager4Web.Entities.Site instance);
    partial void DeleteSite(LicenseManager4Web.Entities.Site instance);
    partial void InsertLicense(LicenseManager4Web.Entities.License instance);
    partial void UpdateLicense(LicenseManager4Web.Entities.License instance);
    partial void DeleteLicense(LicenseManager4Web.Entities.License instance);
    partial void InsertLicenseFeature(LicenseManager4Web.Entities.LicenseFeature instance);
    partial void UpdateLicenseFeature(LicenseManager4Web.Entities.LicenseFeature instance);
    partial void DeleteLicenseFeature(LicenseManager4Web.Entities.LicenseFeature instance);
    #endregion
		
		public LicenseManagerClassesDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["LicenseManagerConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public LicenseManagerClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LicenseManagerClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LicenseManagerClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LicenseManagerClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<LicenseManager4Web.Entities.Activation> Activations
		{
			get
			{
				return this.GetTable<LicenseManager4Web.Entities.Activation>();
			}
		}
		
		public System.Data.Linq.Table<LicenseManager4Web.Entities.Client> Clients
		{
			get
			{
				return this.GetTable<LicenseManager4Web.Entities.Client>();
			}
		}
		
		public System.Data.Linq.Table<LicenseManager4Web.Entities.Site> Sites
		{
			get
			{
				return this.GetTable<LicenseManager4Web.Entities.Site>();
			}
		}
		
		public System.Data.Linq.Table<LicenseManager4Web.Entities.License> Licenses
		{
			get
			{
				return this.GetTable<LicenseManager4Web.Entities.License>();
			}
		}
		
		public System.Data.Linq.Table<LicenseManager4Web.Entities.LicenseFeature> LicenseFeatures
		{
			get
			{
				return this.GetTable<LicenseManager4Web.Entities.LicenseFeature>();
			}
		}
	}
}
namespace LicenseManager4Web.Entities
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Activations")]
	public partial class Activation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _LicenseID;
		
		private string _CPUID;
		
		private System.Nullable<System.DateTime> _ExpirationDate;
		
		private string _ActivationCode;
		
		private string _GeneratedBy;
		
		private System.Nullable<System.DateTime> _GeneratedTime;
		
		private System.Nullable<bool> _IsActivated;
		
		private System.Nullable<bool> _Enabled;
		
		private EntityRef<License> _License;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnLicenseIDChanging(int value);
    partial void OnLicenseIDChanged();
    partial void OnCPUIDChanging(string value);
    partial void OnCPUIDChanged();
    partial void OnExpirationDateChanging(System.Nullable<System.DateTime> value);
    partial void OnExpirationDateChanged();
    partial void OnActivationCodeChanging(string value);
    partial void OnActivationCodeChanged();
    partial void OnGeneratedByChanging(string value);
    partial void OnGeneratedByChanged();
    partial void OnGeneratedTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnGeneratedTimeChanged();
    partial void OnIsActivatedChanging(System.Nullable<bool> value);
    partial void OnIsActivatedChanged();
    partial void OnEnabledChanging(System.Nullable<bool> value);
    partial void OnEnabledChanged();
    #endregion
		
		public Activation()
		{
			this._License = default(EntityRef<License>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LicenseID", DbType="Int NOT NULL")]
		public int LicenseID
		{
			get
			{
				return this._LicenseID;
			}
			set
			{
				if ((this._LicenseID != value))
				{
					if (this._License.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLicenseIDChanging(value);
					this.SendPropertyChanging();
					this._LicenseID = value;
					this.SendPropertyChanged("LicenseID");
					this.OnLicenseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CPUID", DbType="NVarChar(255)")]
		public string CPUID
		{
			get
			{
				return this._CPUID;
			}
			set
			{
				if ((this._CPUID != value))
				{
					this.OnCPUIDChanging(value);
					this.SendPropertyChanging();
					this._CPUID = value;
					this.SendPropertyChanged("CPUID");
					this.OnCPUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpirationDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ExpirationDate
		{
			get
			{
				return this._ExpirationDate;
			}
			set
			{
				if ((this._ExpirationDate != value))
				{
					this.OnExpirationDateChanging(value);
					this.SendPropertyChanging();
					this._ExpirationDate = value;
					this.SendPropertyChanged("ExpirationDate");
					this.OnExpirationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActivationCode", DbType="NVarChar(255)")]
		public string ActivationCode
		{
			get
			{
				return this._ActivationCode;
			}
			set
			{
				if ((this._ActivationCode != value))
				{
					this.OnActivationCodeChanging(value);
					this.SendPropertyChanging();
					this._ActivationCode = value;
					this.SendPropertyChanged("ActivationCode");
					this.OnActivationCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GeneratedBy", DbType="NVarChar(255)")]
		public string GeneratedBy
		{
			get
			{
				return this._GeneratedBy;
			}
			set
			{
				if ((this._GeneratedBy != value))
				{
					this.OnGeneratedByChanging(value);
					this.SendPropertyChanging();
					this._GeneratedBy = value;
					this.SendPropertyChanged("GeneratedBy");
					this.OnGeneratedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GeneratedTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> GeneratedTime
		{
			get
			{
				return this._GeneratedTime;
			}
			set
			{
				if ((this._GeneratedTime != value))
				{
					this.OnGeneratedTimeChanging(value);
					this.SendPropertyChanging();
					this._GeneratedTime = value;
					this.SendPropertyChanged("GeneratedTime");
					this.OnGeneratedTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActivated", DbType="Bit")]
		public System.Nullable<bool> IsActivated
		{
			get
			{
				return this._IsActivated;
			}
			set
			{
				if ((this._IsActivated != value))
				{
					this.OnIsActivatedChanging(value);
					this.SendPropertyChanging();
					this._IsActivated = value;
					this.SendPropertyChanged("IsActivated");
					this.OnIsActivatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Enabled", DbType="Bit")]
		public System.Nullable<bool> Enabled
		{
			get
			{
				return this._Enabled;
			}
			set
			{
				if ((this._Enabled != value))
				{
					this.OnEnabledChanging(value);
					this.SendPropertyChanging();
					this._Enabled = value;
					this.SendPropertyChanged("Enabled");
					this.OnEnabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="License_Activation", Storage="_License", ThisKey="LicenseID", OtherKey="ID", IsForeignKey=true)]
		public License License
		{
			get
			{
				return this._License.Entity;
			}
			set
			{
				License previousValue = this._License.Entity;
				if (((previousValue != value) 
							|| (this._License.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._License.Entity = null;
						previousValue.Activations.Remove(this);
					}
					this._License.Entity = value;
					if ((value != null))
					{
						value.Activations.Add(this);
						this._LicenseID = value.ID;
					}
					else
					{
						this._LicenseID = default(int);
					}
					this.SendPropertyChanged("License");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Clients")]
	public partial class Client : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _ClientName;
		
		private string _SalesForceId;
		
		private EntitySet<Site> _Sites;
		
		private EntitySet<License> _Licenses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnClientNameChanging(string value);
    partial void OnClientNameChanged();
    partial void OnSalesForceIdChanging(string value);
    partial void OnSalesForceIdChanged();
    #endregion
		
		public Client()
		{
			this._Sites = new EntitySet<Site>(new Action<Site>(this.attach_Sites), new Action<Site>(this.detach_Sites));
			this._Licenses = new EntitySet<License>(new Action<License>(this.attach_Licenses), new Action<License>(this.detach_Licenses));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientName", DbType="NVarChar(255)")]
		public string ClientName
		{
			get
			{
				return this._ClientName;
			}
			set
			{
				if ((this._ClientName != value))
				{
					this.OnClientNameChanging(value);
					this.SendPropertyChanging();
					this._ClientName = value;
					this.SendPropertyChanged("ClientName");
					this.OnClientNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalesForceId", DbType="NVarChar(255)")]
		public string SalesForceId
		{
			get
			{
				return this._SalesForceId;
			}
			set
			{
				if ((this._SalesForceId != value))
				{
					this.OnSalesForceIdChanging(value);
					this.SendPropertyChanging();
					this._SalesForceId = value;
					this.SendPropertyChanged("SalesForceId");
					this.OnSalesForceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_Site", Storage="_Sites", ThisKey="ID", OtherKey="ClientID")]
		public EntitySet<Site> Sites
		{
			get
			{
				return this._Sites;
			}
			set
			{
				this._Sites.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_License", Storage="_Licenses", ThisKey="ID", OtherKey="ClientID")]
		public EntitySet<License> Licenses
		{
			get
			{
				return this._Licenses;
			}
			set
			{
				this._Licenses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Sites(Site entity)
		{
			this.SendPropertyChanging();
			entity.Client = this;
		}
		
		private void detach_Sites(Site entity)
		{
			this.SendPropertyChanging();
			entity.Client = null;
		}
		
		private void attach_Licenses(License entity)
		{
			this.SendPropertyChanging();
			entity.Client = this;
		}
		
		private void detach_Licenses(License entity)
		{
			this.SendPropertyChanging();
			entity.Client = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Sites")]
	public partial class Site : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ClientID;
		
		private string _SiteName;
		
		private string _SalesForceId;
		
		private EntitySet<License> _Licenses;
		
		private EntityRef<Client> _Client;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnClientIDChanging(int value);
    partial void OnClientIDChanged();
    partial void OnSiteNameChanging(string value);
    partial void OnSiteNameChanged();
    partial void OnSalesForceIdChanging(string value);
    partial void OnSalesForceIdChanged();
    #endregion
		
		public Site()
		{
			this._Licenses = new EntitySet<License>(new Action<License>(this.attach_Licenses), new Action<License>(this.detach_Licenses));
			this._Client = default(EntityRef<Client>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientID", DbType="Int NOT NULL")]
		public int ClientID
		{
			get
			{
				return this._ClientID;
			}
			set
			{
				if ((this._ClientID != value))
				{
					if (this._Client.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClientIDChanging(value);
					this.SendPropertyChanging();
					this._ClientID = value;
					this.SendPropertyChanged("ClientID");
					this.OnClientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SiteName", DbType="NVarChar(255)")]
		public string SiteName
		{
			get
			{
				return this._SiteName;
			}
			set
			{
				if ((this._SiteName != value))
				{
					this.OnSiteNameChanging(value);
					this.SendPropertyChanging();
					this._SiteName = value;
					this.SendPropertyChanged("SiteName");
					this.OnSiteNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalesForceId", DbType="NVarChar(255)")]
		public string SalesForceId
		{
			get
			{
				return this._SalesForceId;
			}
			set
			{
				if ((this._SalesForceId != value))
				{
					this.OnSalesForceIdChanging(value);
					this.SendPropertyChanging();
					this._SalesForceId = value;
					this.SendPropertyChanged("SalesForceId");
					this.OnSalesForceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Site_License", Storage="_Licenses", ThisKey="ID", OtherKey="SiteID")]
		public EntitySet<License> Licenses
		{
			get
			{
				return this._Licenses;
			}
			set
			{
				this._Licenses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_Site", Storage="_Client", ThisKey="ClientID", OtherKey="ID", IsForeignKey=true)]
		public Client Client
		{
			get
			{
				return this._Client.Entity;
			}
			set
			{
				Client previousValue = this._Client.Entity;
				if (((previousValue != value) 
							|| (this._Client.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Client.Entity = null;
						previousValue.Sites.Remove(this);
					}
					this._Client.Entity = value;
					if ((value != null))
					{
						value.Sites.Add(this);
						this._ClientID = value.ID;
					}
					else
					{
						this._ClientID = default(int);
					}
					this.SendPropertyChanged("Client");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Licenses(License entity)
		{
			this.SendPropertyChanging();
			entity.Site = this;
		}
		
		private void detach_Licenses(License entity)
		{
			this.SendPropertyChanging();
			entity.Site = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Licenses")]
	public partial class License : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _SiteID;
		
		private int _ClientID;
		
		private string _LicenseID;
		
		private int _Product;
		
		private int _LicenseType;
		
		private string _GeneratedBy;
		
		private System.DateTime _GeneratedTime;
		
		private EntitySet<Activation> _Activations;
		
		private EntitySet<LicenseFeature> _LicenseFeatures;
		
		private EntityRef<Client> _Client;
		
		private EntityRef<Site> _Site;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSiteIDChanging(int value);
    partial void OnSiteIDChanged();
    partial void OnClientIDChanging(int value);
    partial void OnClientIDChanged();
    partial void OnLicenseIDChanging(string value);
    partial void OnLicenseIDChanged();
    partial void OnProductChanging(int value);
    partial void OnProductChanged();
    partial void OnLicenseTypeChanging(int value);
    partial void OnLicenseTypeChanged();
    partial void OnGeneratedByChanging(string value);
    partial void OnGeneratedByChanged();
    partial void OnGeneratedTimeChanging(System.DateTime value);
    partial void OnGeneratedTimeChanged();
    #endregion
		
		public License()
		{
			this._Activations = new EntitySet<Activation>(new Action<Activation>(this.attach_Activations), new Action<Activation>(this.detach_Activations));
			this._LicenseFeatures = new EntitySet<LicenseFeature>(new Action<LicenseFeature>(this.attach_LicenseFeatures), new Action<LicenseFeature>(this.detach_LicenseFeatures));
			this._Client = default(EntityRef<Client>);
			this._Site = default(EntityRef<Site>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SiteID", DbType="Int NOT NULL")]
		public int SiteID
		{
			get
			{
				return this._SiteID;
			}
			set
			{
				if ((this._SiteID != value))
				{
					if (this._Site.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSiteIDChanging(value);
					this.SendPropertyChanging();
					this._SiteID = value;
					this.SendPropertyChanged("SiteID");
					this.OnSiteIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientID", DbType="Int NOT NULL")]
		public int ClientID
		{
			get
			{
				return this._ClientID;
			}
			set
			{
				if ((this._ClientID != value))
				{
					if (this._Client.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClientIDChanging(value);
					this.SendPropertyChanging();
					this._ClientID = value;
					this.SendPropertyChanged("ClientID");
					this.OnClientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LicenseID", DbType="NVarChar(255)")]
		public string LicenseID
		{
			get
			{
				return this._LicenseID;
			}
			set
			{
				if ((this._LicenseID != value))
				{
					this.OnLicenseIDChanging(value);
					this.SendPropertyChanging();
					this._LicenseID = value;
					this.SendPropertyChanged("LicenseID");
					this.OnLicenseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Product", DbType="Int NOT NULL")]
		public int Product
		{
			get
			{
				return this._Product;
			}
			set
			{
				if ((this._Product != value))
				{
					this.OnProductChanging(value);
					this.SendPropertyChanging();
					this._Product = value;
					this.SendPropertyChanged("Product");
					this.OnProductChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LicenseType", DbType="Int NOT NULL")]
		public int LicenseType
		{
			get
			{
				return this._LicenseType;
			}
			set
			{
				if ((this._LicenseType != value))
				{
					this.OnLicenseTypeChanging(value);
					this.SendPropertyChanging();
					this._LicenseType = value;
					this.SendPropertyChanged("LicenseType");
					this.OnLicenseTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GeneratedBy", DbType="NVarChar(255)")]
		public string GeneratedBy
		{
			get
			{
				return this._GeneratedBy;
			}
			set
			{
				if ((this._GeneratedBy != value))
				{
					this.OnGeneratedByChanging(value);
					this.SendPropertyChanging();
					this._GeneratedBy = value;
					this.SendPropertyChanged("GeneratedBy");
					this.OnGeneratedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GeneratedTime", DbType="DateTime NOT NULL")]
		public System.DateTime GeneratedTime
		{
			get
			{
				return this._GeneratedTime;
			}
			set
			{
				if ((this._GeneratedTime != value))
				{
					this.OnGeneratedTimeChanging(value);
					this.SendPropertyChanging();
					this._GeneratedTime = value;
					this.SendPropertyChanged("GeneratedTime");
					this.OnGeneratedTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="License_Activation", Storage="_Activations", ThisKey="ID", OtherKey="LicenseID")]
		public EntitySet<Activation> Activations
		{
			get
			{
				return this._Activations;
			}
			set
			{
				this._Activations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="License_LicenseFeature", Storage="_LicenseFeatures", ThisKey="ID", OtherKey="LicenseID")]
		public EntitySet<LicenseFeature> LicenseFeatures
		{
			get
			{
				return this._LicenseFeatures;
			}
			set
			{
				this._LicenseFeatures.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_License", Storage="_Client", ThisKey="ClientID", OtherKey="ID", IsForeignKey=true)]
		public Client Client
		{
			get
			{
				return this._Client.Entity;
			}
			set
			{
				Client previousValue = this._Client.Entity;
				if (((previousValue != value) 
							|| (this._Client.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Client.Entity = null;
						previousValue.Licenses.Remove(this);
					}
					this._Client.Entity = value;
					if ((value != null))
					{
						value.Licenses.Add(this);
						this._ClientID = value.ID;
					}
					else
					{
						this._ClientID = default(int);
					}
					this.SendPropertyChanged("Client");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Site_License", Storage="_Site", ThisKey="SiteID", OtherKey="ID", IsForeignKey=true)]
		public Site Site
		{
			get
			{
				return this._Site.Entity;
			}
			set
			{
				Site previousValue = this._Site.Entity;
				if (((previousValue != value) 
							|| (this._Site.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Site.Entity = null;
						previousValue.Licenses.Remove(this);
					}
					this._Site.Entity = value;
					if ((value != null))
					{
						value.Licenses.Add(this);
						this._SiteID = value.ID;
					}
					else
					{
						this._SiteID = default(int);
					}
					this.SendPropertyChanged("Site");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Activations(Activation entity)
		{
			this.SendPropertyChanging();
			entity.License = this;
		}
		
		private void detach_Activations(Activation entity)
		{
			this.SendPropertyChanging();
			entity.License = null;
		}
		
		private void attach_LicenseFeatures(LicenseFeature entity)
		{
			this.SendPropertyChanging();
			entity.License = this;
		}
		
		private void detach_LicenseFeatures(LicenseFeature entity)
		{
			this.SendPropertyChanging();
			entity.License = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LicenseFeatures")]
	public partial class LicenseFeature : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _LicenseID;
		
		private string _LicenseKey;
		
		private System.Nullable<System.DateTime> _ExpirationDate;
		
		private System.Nullable<System.DateTime> _ExtendedExpirationDate;
		
		private System.Nullable<System.DateTime> _ExpirationWarningStartDate;
		
		private int _ExpirationWarningsMode;
		
		private System.Nullable<int> _ExpirationWarningsFrequency;
		
		private string _ExpirationWarningsUnit;
		
		private int _AllowedWasteClasses;
		
		private string _ProductVersionName;
		
		private int _DefaultUserLevel;
		
		private string _ManagerPassword;
		
		private string _AdministratorPassword;
		
		private System.Nullable<bool> _ConfiguratorInstalled;
		
		private System.Nullable<bool> _UseConfigurator;
		
		private System.Nullable<int> _NumberOfSites;
		
		private System.Nullable<bool> _ManageTypesAvailable;
		
		private System.Nullable<bool> _AddUsers;
		
		private System.Nullable<bool> _RemoveUsers;
		
		private System.Nullable<bool> _ManageTrackers;
		
		private System.Nullable<bool> _ManageSites;
		
		private System.Nullable<bool> _ManageEventTypes;
		
		private System.Nullable<bool> _ManageEventClients;
		
		private System.Nullable<bool> _ManageEventOrders;
		
		private System.Nullable<int> _TrackerLimit;
		
		private System.Nullable<int> _FoodTypeLimit;
		
		private System.Nullable<bool> _FoodCostAdjustments;
		
		private System.Nullable<int> _LossTypeLimit;
		
		private System.Nullable<int> _UserTypeLimit;
		
		private System.Nullable<bool> _ManagePreferences;
		
		private System.Nullable<bool> _ManageBaselines;
		
		private System.Nullable<bool> _UpdateTracker;
		
		private System.Nullable<bool> _ImportWasteData;
		
		private System.Nullable<bool> _RecurringTransactionsAvailable;
		
		private System.Nullable<bool> _EnterLogSheetData;
		
		private System.Nullable<bool> _ManageLogForms;
		
		private System.Nullable<bool> _ManageDataEntryTemplates;
		
		private System.Nullable<int> _DetLimits;
		
		private System.Nullable<bool> _ConfigureStationEntry;
		
		private System.Nullable<bool> _ConfigureDaypartEntry;
		
		private System.Nullable<bool> _ConfigureDispositionEntry;
		
		private System.Nullable<bool> _ConfigurePrePostEntry;
		
		private System.Nullable<bool> _StationEntry;
		
		private System.Nullable<bool> _DaypartEntry;
		
		private System.Nullable<bool> _DispositionEntry;
		
		private System.Nullable<bool> _PrePostEntry;
		
		private System.Nullable<bool> _AdvancedMenuAvailable;
		
		private System.Nullable<bool> _EnterFinancialsAvailable;
		
		private System.Nullable<bool> _EnterSWATNotesAvailable;
		
		private System.Nullable<bool> _ManageReportsSettingsShortcut;
		
		private System.Nullable<int> _ReportLimits;
		
		private System.Nullable<bool> _AddNewReport;
		
		private System.Nullable<bool> _AddNewCollection;
		
		private System.Nullable<bool> _Clone;
		
		private string _SupportEmailAddress;
		
		private System.Nullable<bool> _ShowSupportEmailAddress;
		
		private string _SupportPhoneNumber;
		
		private System.Nullable<bool> _ShowSupportPhoneNumber;
		
		private string _SupportWebSiteURL;
		
		private System.Nullable<bool> _ShowSupportWebSiteURL;
		
		private System.Nullable<int> _Product;
		
		private EntityRef<License> _License;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnLicenseIDChanging(int value);
    partial void OnLicenseIDChanged();
    partial void OnLicenseKeyChanging(string value);
    partial void OnLicenseKeyChanged();
    partial void OnExpirationDateChanging(System.Nullable<System.DateTime> value);
    partial void OnExpirationDateChanged();
    partial void OnExtendedExpirationDateChanging(System.Nullable<System.DateTime> value);
    partial void OnExtendedExpirationDateChanged();
    partial void OnExpirationWarningStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnExpirationWarningStartDateChanged();
    partial void OnExpirationWarningsModeChanging(int value);
    partial void OnExpirationWarningsModeChanged();
    partial void OnExpirationWarningsFrequencyChanging(System.Nullable<int> value);
    partial void OnExpirationWarningsFrequencyChanged();
    partial void OnExpirationWarningsUnitChanging(string value);
    partial void OnExpirationWarningsUnitChanged();
    partial void OnAllowedWasteClassesChanging(int value);
    partial void OnAllowedWasteClassesChanged();
    partial void OnProductVersionNameChanging(string value);
    partial void OnProductVersionNameChanged();
    partial void OnDefaultUserLevelChanging(int value);
    partial void OnDefaultUserLevelChanged();
    partial void OnManagerPasswordChanging(string value);
    partial void OnManagerPasswordChanged();
    partial void OnAdministratorPasswordChanging(string value);
    partial void OnAdministratorPasswordChanged();
    partial void OnConfiguratorInstalledChanging(System.Nullable<bool> value);
    partial void OnConfiguratorInstalledChanged();
    partial void OnUseConfiguratorChanging(System.Nullable<bool> value);
    partial void OnUseConfiguratorChanged();
    partial void OnNumberOfSitesChanging(System.Nullable<int> value);
    partial void OnNumberOfSitesChanged();
    partial void OnManageTypesAvailableChanging(System.Nullable<bool> value);
    partial void OnManageTypesAvailableChanged();
    partial void OnAddUsersChanging(System.Nullable<bool> value);
    partial void OnAddUsersChanged();
    partial void OnRemoveUsersChanging(System.Nullable<bool> value);
    partial void OnRemoveUsersChanged();
    partial void OnManageTrackersChanging(System.Nullable<bool> value);
    partial void OnManageTrackersChanged();
    partial void OnManageSitesChanging(System.Nullable<bool> value);
    partial void OnManageSitesChanged();
    partial void OnManageEventTypesChanging(System.Nullable<bool> value);
    partial void OnManageEventTypesChanged();
    partial void OnManageEventClientsChanging(System.Nullable<bool> value);
    partial void OnManageEventClientsChanged();
    partial void OnManageEventOrdersChanging(System.Nullable<bool> value);
    partial void OnManageEventOrdersChanged();
    partial void OnTrackerLimitChanging(System.Nullable<int> value);
    partial void OnTrackerLimitChanged();
    partial void OnFoodTypeLimitChanging(System.Nullable<int> value);
    partial void OnFoodTypeLimitChanged();
    partial void OnFoodCostAdjustmentsChanging(System.Nullable<bool> value);
    partial void OnFoodCostAdjustmentsChanged();
    partial void OnLossTypeLimitChanging(System.Nullable<int> value);
    partial void OnLossTypeLimitChanged();
    partial void OnUserTypeLimitChanging(System.Nullable<int> value);
    partial void OnUserTypeLimitChanged();
    partial void OnManagePreferencesChanging(System.Nullable<bool> value);
    partial void OnManagePreferencesChanged();
    partial void OnManageBaselinesChanging(System.Nullable<bool> value);
    partial void OnManageBaselinesChanged();
    partial void OnUpdateTrackerChanging(System.Nullable<bool> value);
    partial void OnUpdateTrackerChanged();
    partial void OnImportWasteDataChanging(System.Nullable<bool> value);
    partial void OnImportWasteDataChanged();
    partial void OnRecurringTransactionsAvailableChanging(System.Nullable<bool> value);
    partial void OnRecurringTransactionsAvailableChanged();
    partial void OnEnterLogSheetDataChanging(System.Nullable<bool> value);
    partial void OnEnterLogSheetDataChanged();
    partial void OnManageLogFormsChanging(System.Nullable<bool> value);
    partial void OnManageLogFormsChanged();
    partial void OnManageDataEntryTemplatesChanging(System.Nullable<bool> value);
    partial void OnManageDataEntryTemplatesChanged();
    partial void OnDetLimitsChanging(System.Nullable<int> value);
    partial void OnDetLimitsChanged();
    partial void OnConfigureStationEntryChanging(System.Nullable<bool> value);
    partial void OnConfigureStationEntryChanged();
    partial void OnConfigureDaypartEntryChanging(System.Nullable<bool> value);
    partial void OnConfigureDaypartEntryChanged();
    partial void OnConfigureDispositionEntryChanging(System.Nullable<bool> value);
    partial void OnConfigureDispositionEntryChanged();
    partial void OnConfigurePrePostEntryChanging(System.Nullable<bool> value);
    partial void OnConfigurePrePostEntryChanged();
    partial void OnStationEntryChanging(System.Nullable<bool> value);
    partial void OnStationEntryChanged();
    partial void OnDaypartEntryChanging(System.Nullable<bool> value);
    partial void OnDaypartEntryChanged();
    partial void OnDispositionEntryChanging(System.Nullable<bool> value);
    partial void OnDispositionEntryChanged();
    partial void OnPrePostEntryChanging(System.Nullable<bool> value);
    partial void OnPrePostEntryChanged();
    partial void OnAdvancedMenuAvailableChanging(System.Nullable<bool> value);
    partial void OnAdvancedMenuAvailableChanged();
    partial void OnEnterFinancialsAvailableChanging(System.Nullable<bool> value);
    partial void OnEnterFinancialsAvailableChanged();
    partial void OnEnterSWATNotesAvailableChanging(System.Nullable<bool> value);
    partial void OnEnterSWATNotesAvailableChanged();
    partial void OnManageReportsSettingsShortcutChanging(System.Nullable<bool> value);
    partial void OnManageReportsSettingsShortcutChanged();
    partial void OnReportLimitsChanging(System.Nullable<int> value);
    partial void OnReportLimitsChanged();
    partial void OnAddNewReportChanging(System.Nullable<bool> value);
    partial void OnAddNewReportChanged();
    partial void OnAddNewCollectionChanging(System.Nullable<bool> value);
    partial void OnAddNewCollectionChanged();
    partial void OnCloneChanging(System.Nullable<bool> value);
    partial void OnCloneChanged();
    partial void OnSupportEmailAddressChanging(string value);
    partial void OnSupportEmailAddressChanged();
    partial void OnShowSupportEmailAddressChanging(System.Nullable<bool> value);
    partial void OnShowSupportEmailAddressChanged();
    partial void OnSupportPhoneNumberChanging(string value);
    partial void OnSupportPhoneNumberChanged();
    partial void OnShowSupportPhoneNumberChanging(System.Nullable<bool> value);
    partial void OnShowSupportPhoneNumberChanged();
    partial void OnSupportWebSiteURLChanging(string value);
    partial void OnSupportWebSiteURLChanged();
    partial void OnShowSupportWebSiteURLChanging(System.Nullable<bool> value);
    partial void OnShowSupportWebSiteURLChanged();
    partial void OnProductChanging(System.Nullable<int> value);
    partial void OnProductChanged();
    #endregion
		
		public LicenseFeature()
		{
			this._License = default(EntityRef<License>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LicenseID", DbType="Int NOT NULL")]
		public int LicenseID
		{
			get
			{
				return this._LicenseID;
			}
			set
			{
				if ((this._LicenseID != value))
				{
					if (this._License.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLicenseIDChanging(value);
					this.SendPropertyChanging();
					this._LicenseID = value;
					this.SendPropertyChanged("LicenseID");
					this.OnLicenseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LicenseKey", DbType="NVarChar(255)")]
		public string LicenseKey
		{
			get
			{
				return this._LicenseKey;
			}
			set
			{
				if ((this._LicenseKey != value))
				{
					this.OnLicenseKeyChanging(value);
					this.SendPropertyChanging();
					this._LicenseKey = value;
					this.SendPropertyChanged("LicenseKey");
					this.OnLicenseKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpirationDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ExpirationDate
		{
			get
			{
				return this._ExpirationDate;
			}
			set
			{
				if ((this._ExpirationDate != value))
				{
					this.OnExpirationDateChanging(value);
					this.SendPropertyChanging();
					this._ExpirationDate = value;
					this.SendPropertyChanged("ExpirationDate");
					this.OnExpirationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExtendedExpirationDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ExtendedExpirationDate
		{
			get
			{
				return this._ExtendedExpirationDate;
			}
			set
			{
				if ((this._ExtendedExpirationDate != value))
				{
					this.OnExtendedExpirationDateChanging(value);
					this.SendPropertyChanging();
					this._ExtendedExpirationDate = value;
					this.SendPropertyChanged("ExtendedExpirationDate");
					this.OnExtendedExpirationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpirationWarningStartDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ExpirationWarningStartDate
		{
			get
			{
				return this._ExpirationWarningStartDate;
			}
			set
			{
				if ((this._ExpirationWarningStartDate != value))
				{
					this.OnExpirationWarningStartDateChanging(value);
					this.SendPropertyChanging();
					this._ExpirationWarningStartDate = value;
					this.SendPropertyChanged("ExpirationWarningStartDate");
					this.OnExpirationWarningStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpirationWarningsMode", DbType="Int NOT NULL")]
		public int ExpirationWarningsMode
		{
			get
			{
				return this._ExpirationWarningsMode;
			}
			set
			{
				if ((this._ExpirationWarningsMode != value))
				{
					this.OnExpirationWarningsModeChanging(value);
					this.SendPropertyChanging();
					this._ExpirationWarningsMode = value;
					this.SendPropertyChanged("ExpirationWarningsMode");
					this.OnExpirationWarningsModeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpirationWarningsFrequency", DbType="Int")]
		public System.Nullable<int> ExpirationWarningsFrequency
		{
			get
			{
				return this._ExpirationWarningsFrequency;
			}
			set
			{
				if ((this._ExpirationWarningsFrequency != value))
				{
					this.OnExpirationWarningsFrequencyChanging(value);
					this.SendPropertyChanging();
					this._ExpirationWarningsFrequency = value;
					this.SendPropertyChanged("ExpirationWarningsFrequency");
					this.OnExpirationWarningsFrequencyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpirationWarningsUnit", DbType="NVarChar(50)")]
		public string ExpirationWarningsUnit
		{
			get
			{
				return this._ExpirationWarningsUnit;
			}
			set
			{
				if ((this._ExpirationWarningsUnit != value))
				{
					this.OnExpirationWarningsUnitChanging(value);
					this.SendPropertyChanging();
					this._ExpirationWarningsUnit = value;
					this.SendPropertyChanged("ExpirationWarningsUnit");
					this.OnExpirationWarningsUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AllowedWasteClasses", DbType="Int NOT NULL")]
		public int AllowedWasteClasses
		{
			get
			{
				return this._AllowedWasteClasses;
			}
			set
			{
				if ((this._AllowedWasteClasses != value))
				{
					this.OnAllowedWasteClassesChanging(value);
					this.SendPropertyChanging();
					this._AllowedWasteClasses = value;
					this.SendPropertyChanged("AllowedWasteClasses");
					this.OnAllowedWasteClassesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductVersionName", DbType="NVarChar(255)")]
		public string ProductVersionName
		{
			get
			{
				return this._ProductVersionName;
			}
			set
			{
				if ((this._ProductVersionName != value))
				{
					this.OnProductVersionNameChanging(value);
					this.SendPropertyChanging();
					this._ProductVersionName = value;
					this.SendPropertyChanged("ProductVersionName");
					this.OnProductVersionNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefaultUserLevel", DbType="Int NOT NULL")]
		public int DefaultUserLevel
		{
			get
			{
				return this._DefaultUserLevel;
			}
			set
			{
				if ((this._DefaultUserLevel != value))
				{
					this.OnDefaultUserLevelChanging(value);
					this.SendPropertyChanging();
					this._DefaultUserLevel = value;
					this.SendPropertyChanged("DefaultUserLevel");
					this.OnDefaultUserLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ManagerPassword", DbType="NVarChar(255)")]
		public string ManagerPassword
		{
			get
			{
				return this._ManagerPassword;
			}
			set
			{
				if ((this._ManagerPassword != value))
				{
					this.OnManagerPasswordChanging(value);
					this.SendPropertyChanging();
					this._ManagerPassword = value;
					this.SendPropertyChanged("ManagerPassword");
					this.OnManagerPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdministratorPassword", DbType="NVarChar(255)")]
		public string AdministratorPassword
		{
			get
			{
				return this._AdministratorPassword;
			}
			set
			{
				if ((this._AdministratorPassword != value))
				{
					this.OnAdministratorPasswordChanging(value);
					this.SendPropertyChanging();
					this._AdministratorPassword = value;
					this.SendPropertyChanged("AdministratorPassword");
					this.OnAdministratorPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConfiguratorInstalled", DbType="Bit")]
		public System.Nullable<bool> ConfiguratorInstalled
		{
			get
			{
				return this._ConfiguratorInstalled;
			}
			set
			{
				if ((this._ConfiguratorInstalled != value))
				{
					this.OnConfiguratorInstalledChanging(value);
					this.SendPropertyChanging();
					this._ConfiguratorInstalled = value;
					this.SendPropertyChanged("ConfiguratorInstalled");
					this.OnConfiguratorInstalledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UseConfigurator", DbType="Bit")]
		public System.Nullable<bool> UseConfigurator
		{
			get
			{
				return this._UseConfigurator;
			}
			set
			{
				if ((this._UseConfigurator != value))
				{
					this.OnUseConfiguratorChanging(value);
					this.SendPropertyChanging();
					this._UseConfigurator = value;
					this.SendPropertyChanged("UseConfigurator");
					this.OnUseConfiguratorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfSites", DbType="Int")]
		public System.Nullable<int> NumberOfSites
		{
			get
			{
				return this._NumberOfSites;
			}
			set
			{
				if ((this._NumberOfSites != value))
				{
					this.OnNumberOfSitesChanging(value);
					this.SendPropertyChanging();
					this._NumberOfSites = value;
					this.SendPropertyChanged("NumberOfSites");
					this.OnNumberOfSitesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ManageTypesAvailable", DbType="Bit")]
		public System.Nullable<bool> ManageTypesAvailable
		{
			get
			{
				return this._ManageTypesAvailable;
			}
			set
			{
				if ((this._ManageTypesAvailable != value))
				{
					this.OnManageTypesAvailableChanging(value);
					this.SendPropertyChanging();
					this._ManageTypesAvailable = value;
					this.SendPropertyChanged("ManageTypesAvailable");
					this.OnManageTypesAvailableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddUsers", DbType="Bit")]
		public System.Nullable<bool> AddUsers
		{
			get
			{
				return this._AddUsers;
			}
			set
			{
				if ((this._AddUsers != value))
				{
					this.OnAddUsersChanging(value);
					this.SendPropertyChanging();
					this._AddUsers = value;
					this.SendPropertyChanged("AddUsers");
					this.OnAddUsersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RemoveUsers", DbType="Bit")]
		public System.Nullable<bool> RemoveUsers
		{
			get
			{
				return this._RemoveUsers;
			}
			set
			{
				if ((this._RemoveUsers != value))
				{
					this.OnRemoveUsersChanging(value);
					this.SendPropertyChanging();
					this._RemoveUsers = value;
					this.SendPropertyChanged("RemoveUsers");
					this.OnRemoveUsersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ManageTrackers", DbType="Bit")]
		public System.Nullable<bool> ManageTrackers
		{
			get
			{
				return this._ManageTrackers;
			}
			set
			{
				if ((this._ManageTrackers != value))
				{
					this.OnManageTrackersChanging(value);
					this.SendPropertyChanging();
					this._ManageTrackers = value;
					this.SendPropertyChanged("ManageTrackers");
					this.OnManageTrackersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ManageSites", DbType="Bit")]
		public System.Nullable<bool> ManageSites
		{
			get
			{
				return this._ManageSites;
			}
			set
			{
				if ((this._ManageSites != value))
				{
					this.OnManageSitesChanging(value);
					this.SendPropertyChanging();
					this._ManageSites = value;
					this.SendPropertyChanged("ManageSites");
					this.OnManageSitesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ManageEventTypes", DbType="Bit")]
		public System.Nullable<bool> ManageEventTypes
		{
			get
			{
				return this._ManageEventTypes;
			}
			set
			{
				if ((this._ManageEventTypes != value))
				{
					this.OnManageEventTypesChanging(value);
					this.SendPropertyChanging();
					this._ManageEventTypes = value;
					this.SendPropertyChanged("ManageEventTypes");
					this.OnManageEventTypesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ManageEventClients", DbType="Bit")]
		public System.Nullable<bool> ManageEventClients
		{
			get
			{
				return this._ManageEventClients;
			}
			set
			{
				if ((this._ManageEventClients != value))
				{
					this.OnManageEventClientsChanging(value);
					this.SendPropertyChanging();
					this._ManageEventClients = value;
					this.SendPropertyChanged("ManageEventClients");
					this.OnManageEventClientsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ManageEventOrders", DbType="Bit")]
		public System.Nullable<bool> ManageEventOrders
		{
			get
			{
				return this._ManageEventOrders;
			}
			set
			{
				if ((this._ManageEventOrders != value))
				{
					this.OnManageEventOrdersChanging(value);
					this.SendPropertyChanging();
					this._ManageEventOrders = value;
					this.SendPropertyChanged("ManageEventOrders");
					this.OnManageEventOrdersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TrackerLimit", DbType="Int")]
		public System.Nullable<int> TrackerLimit
		{
			get
			{
				return this._TrackerLimit;
			}
			set
			{
				if ((this._TrackerLimit != value))
				{
					this.OnTrackerLimitChanging(value);
					this.SendPropertyChanging();
					this._TrackerLimit = value;
					this.SendPropertyChanged("TrackerLimit");
					this.OnTrackerLimitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FoodTypeLimit", DbType="Int")]
		public System.Nullable<int> FoodTypeLimit
		{
			get
			{
				return this._FoodTypeLimit;
			}
			set
			{
				if ((this._FoodTypeLimit != value))
				{
					this.OnFoodTypeLimitChanging(value);
					this.SendPropertyChanging();
					this._FoodTypeLimit = value;
					this.SendPropertyChanged("FoodTypeLimit");
					this.OnFoodTypeLimitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FoodCostAdjustments", DbType="Bit")]
		public System.Nullable<bool> FoodCostAdjustments
		{
			get
			{
				return this._FoodCostAdjustments;
			}
			set
			{
				if ((this._FoodCostAdjustments != value))
				{
					this.OnFoodCostAdjustmentsChanging(value);
					this.SendPropertyChanging();
					this._FoodCostAdjustments = value;
					this.SendPropertyChanged("FoodCostAdjustments");
					this.OnFoodCostAdjustmentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LossTypeLimit", DbType="Int")]
		public System.Nullable<int> LossTypeLimit
		{
			get
			{
				return this._LossTypeLimit;
			}
			set
			{
				if ((this._LossTypeLimit != value))
				{
					this.OnLossTypeLimitChanging(value);
					this.SendPropertyChanging();
					this._LossTypeLimit = value;
					this.SendPropertyChanged("LossTypeLimit");
					this.OnLossTypeLimitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserTypeLimit", DbType="Int")]
		public System.Nullable<int> UserTypeLimit
		{
			get
			{
				return this._UserTypeLimit;
			}
			set
			{
				if ((this._UserTypeLimit != value))
				{
					this.OnUserTypeLimitChanging(value);
					this.SendPropertyChanging();
					this._UserTypeLimit = value;
					this.SendPropertyChanged("UserTypeLimit");
					this.OnUserTypeLimitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ManagePreferences", DbType="Bit")]
		public System.Nullable<bool> ManagePreferences
		{
			get
			{
				return this._ManagePreferences;
			}
			set
			{
				if ((this._ManagePreferences != value))
				{
					this.OnManagePreferencesChanging(value);
					this.SendPropertyChanging();
					this._ManagePreferences = value;
					this.SendPropertyChanged("ManagePreferences");
					this.OnManagePreferencesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ManageBaselines", DbType="Bit")]
		public System.Nullable<bool> ManageBaselines
		{
			get
			{
				return this._ManageBaselines;
			}
			set
			{
				if ((this._ManageBaselines != value))
				{
					this.OnManageBaselinesChanging(value);
					this.SendPropertyChanging();
					this._ManageBaselines = value;
					this.SendPropertyChanged("ManageBaselines");
					this.OnManageBaselinesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateTracker", DbType="Bit")]
		public System.Nullable<bool> UpdateTracker
		{
			get
			{
				return this._UpdateTracker;
			}
			set
			{
				if ((this._UpdateTracker != value))
				{
					this.OnUpdateTrackerChanging(value);
					this.SendPropertyChanging();
					this._UpdateTracker = value;
					this.SendPropertyChanged("UpdateTracker");
					this.OnUpdateTrackerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImportWasteData", DbType="Bit")]
		public System.Nullable<bool> ImportWasteData
		{
			get
			{
				return this._ImportWasteData;
			}
			set
			{
				if ((this._ImportWasteData != value))
				{
					this.OnImportWasteDataChanging(value);
					this.SendPropertyChanging();
					this._ImportWasteData = value;
					this.SendPropertyChanged("ImportWasteData");
					this.OnImportWasteDataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecurringTransactionsAvailable", DbType="Bit")]
		public System.Nullable<bool> RecurringTransactionsAvailable
		{
			get
			{
				return this._RecurringTransactionsAvailable;
			}
			set
			{
				if ((this._RecurringTransactionsAvailable != value))
				{
					this.OnRecurringTransactionsAvailableChanging(value);
					this.SendPropertyChanging();
					this._RecurringTransactionsAvailable = value;
					this.SendPropertyChanged("RecurringTransactionsAvailable");
					this.OnRecurringTransactionsAvailableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnterLogSheetData", DbType="Bit")]
		public System.Nullable<bool> EnterLogSheetData
		{
			get
			{
				return this._EnterLogSheetData;
			}
			set
			{
				if ((this._EnterLogSheetData != value))
				{
					this.OnEnterLogSheetDataChanging(value);
					this.SendPropertyChanging();
					this._EnterLogSheetData = value;
					this.SendPropertyChanged("EnterLogSheetData");
					this.OnEnterLogSheetDataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ManageLogForms", DbType="Bit")]
		public System.Nullable<bool> ManageLogForms
		{
			get
			{
				return this._ManageLogForms;
			}
			set
			{
				if ((this._ManageLogForms != value))
				{
					this.OnManageLogFormsChanging(value);
					this.SendPropertyChanging();
					this._ManageLogForms = value;
					this.SendPropertyChanged("ManageLogForms");
					this.OnManageLogFormsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ManageDataEntryTemplates", DbType="Bit")]
		public System.Nullable<bool> ManageDataEntryTemplates
		{
			get
			{
				return this._ManageDataEntryTemplates;
			}
			set
			{
				if ((this._ManageDataEntryTemplates != value))
				{
					this.OnManageDataEntryTemplatesChanging(value);
					this.SendPropertyChanging();
					this._ManageDataEntryTemplates = value;
					this.SendPropertyChanged("ManageDataEntryTemplates");
					this.OnManageDataEntryTemplatesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DetLimits", DbType="Int")]
		public System.Nullable<int> DetLimits
		{
			get
			{
				return this._DetLimits;
			}
			set
			{
				if ((this._DetLimits != value))
				{
					this.OnDetLimitsChanging(value);
					this.SendPropertyChanging();
					this._DetLimits = value;
					this.SendPropertyChanged("DetLimits");
					this.OnDetLimitsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConfigureStationEntry", DbType="Bit")]
		public System.Nullable<bool> ConfigureStationEntry
		{
			get
			{
				return this._ConfigureStationEntry;
			}
			set
			{
				if ((this._ConfigureStationEntry != value))
				{
					this.OnConfigureStationEntryChanging(value);
					this.SendPropertyChanging();
					this._ConfigureStationEntry = value;
					this.SendPropertyChanged("ConfigureStationEntry");
					this.OnConfigureStationEntryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConfigureDaypartEntry", DbType="Bit")]
		public System.Nullable<bool> ConfigureDaypartEntry
		{
			get
			{
				return this._ConfigureDaypartEntry;
			}
			set
			{
				if ((this._ConfigureDaypartEntry != value))
				{
					this.OnConfigureDaypartEntryChanging(value);
					this.SendPropertyChanging();
					this._ConfigureDaypartEntry = value;
					this.SendPropertyChanged("ConfigureDaypartEntry");
					this.OnConfigureDaypartEntryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConfigureDispositionEntry", DbType="Bit")]
		public System.Nullable<bool> ConfigureDispositionEntry
		{
			get
			{
				return this._ConfigureDispositionEntry;
			}
			set
			{
				if ((this._ConfigureDispositionEntry != value))
				{
					this.OnConfigureDispositionEntryChanging(value);
					this.SendPropertyChanging();
					this._ConfigureDispositionEntry = value;
					this.SendPropertyChanged("ConfigureDispositionEntry");
					this.OnConfigureDispositionEntryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConfigurePrePostEntry", DbType="Bit")]
		public System.Nullable<bool> ConfigurePrePostEntry
		{
			get
			{
				return this._ConfigurePrePostEntry;
			}
			set
			{
				if ((this._ConfigurePrePostEntry != value))
				{
					this.OnConfigurePrePostEntryChanging(value);
					this.SendPropertyChanging();
					this._ConfigurePrePostEntry = value;
					this.SendPropertyChanged("ConfigurePrePostEntry");
					this.OnConfigurePrePostEntryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StationEntry", DbType="Bit")]
		public System.Nullable<bool> StationEntry
		{
			get
			{
				return this._StationEntry;
			}
			set
			{
				if ((this._StationEntry != value))
				{
					this.OnStationEntryChanging(value);
					this.SendPropertyChanging();
					this._StationEntry = value;
					this.SendPropertyChanged("StationEntry");
					this.OnStationEntryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DaypartEntry", DbType="Bit")]
		public System.Nullable<bool> DaypartEntry
		{
			get
			{
				return this._DaypartEntry;
			}
			set
			{
				if ((this._DaypartEntry != value))
				{
					this.OnDaypartEntryChanging(value);
					this.SendPropertyChanging();
					this._DaypartEntry = value;
					this.SendPropertyChanged("DaypartEntry");
					this.OnDaypartEntryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DispositionEntry", DbType="Bit")]
		public System.Nullable<bool> DispositionEntry
		{
			get
			{
				return this._DispositionEntry;
			}
			set
			{
				if ((this._DispositionEntry != value))
				{
					this.OnDispositionEntryChanging(value);
					this.SendPropertyChanging();
					this._DispositionEntry = value;
					this.SendPropertyChanged("DispositionEntry");
					this.OnDispositionEntryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrePostEntry", DbType="Bit")]
		public System.Nullable<bool> PrePostEntry
		{
			get
			{
				return this._PrePostEntry;
			}
			set
			{
				if ((this._PrePostEntry != value))
				{
					this.OnPrePostEntryChanging(value);
					this.SendPropertyChanging();
					this._PrePostEntry = value;
					this.SendPropertyChanged("PrePostEntry");
					this.OnPrePostEntryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdvancedMenuAvailable", DbType="Bit")]
		public System.Nullable<bool> AdvancedMenuAvailable
		{
			get
			{
				return this._AdvancedMenuAvailable;
			}
			set
			{
				if ((this._AdvancedMenuAvailable != value))
				{
					this.OnAdvancedMenuAvailableChanging(value);
					this.SendPropertyChanging();
					this._AdvancedMenuAvailable = value;
					this.SendPropertyChanged("AdvancedMenuAvailable");
					this.OnAdvancedMenuAvailableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnterFinancialsAvailable", DbType="Bit")]
		public System.Nullable<bool> EnterFinancialsAvailable
		{
			get
			{
				return this._EnterFinancialsAvailable;
			}
			set
			{
				if ((this._EnterFinancialsAvailable != value))
				{
					this.OnEnterFinancialsAvailableChanging(value);
					this.SendPropertyChanging();
					this._EnterFinancialsAvailable = value;
					this.SendPropertyChanged("EnterFinancialsAvailable");
					this.OnEnterFinancialsAvailableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnterSWATNotesAvailable", DbType="Bit")]
		public System.Nullable<bool> EnterSWATNotesAvailable
		{
			get
			{
				return this._EnterSWATNotesAvailable;
			}
			set
			{
				if ((this._EnterSWATNotesAvailable != value))
				{
					this.OnEnterSWATNotesAvailableChanging(value);
					this.SendPropertyChanging();
					this._EnterSWATNotesAvailable = value;
					this.SendPropertyChanged("EnterSWATNotesAvailable");
					this.OnEnterSWATNotesAvailableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ManageReportsSettingsShortcut", DbType="Bit")]
		public System.Nullable<bool> ManageReportsSettingsShortcut
		{
			get
			{
				return this._ManageReportsSettingsShortcut;
			}
			set
			{
				if ((this._ManageReportsSettingsShortcut != value))
				{
					this.OnManageReportsSettingsShortcutChanging(value);
					this.SendPropertyChanging();
					this._ManageReportsSettingsShortcut = value;
					this.SendPropertyChanged("ManageReportsSettingsShortcut");
					this.OnManageReportsSettingsShortcutChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportLimits", DbType="Int")]
		public System.Nullable<int> ReportLimits
		{
			get
			{
				return this._ReportLimits;
			}
			set
			{
				if ((this._ReportLimits != value))
				{
					this.OnReportLimitsChanging(value);
					this.SendPropertyChanging();
					this._ReportLimits = value;
					this.SendPropertyChanged("ReportLimits");
					this.OnReportLimitsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddNewReport", DbType="Bit")]
		public System.Nullable<bool> AddNewReport
		{
			get
			{
				return this._AddNewReport;
			}
			set
			{
				if ((this._AddNewReport != value))
				{
					this.OnAddNewReportChanging(value);
					this.SendPropertyChanging();
					this._AddNewReport = value;
					this.SendPropertyChanged("AddNewReport");
					this.OnAddNewReportChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddNewCollection", DbType="Bit")]
		public System.Nullable<bool> AddNewCollection
		{
			get
			{
				return this._AddNewCollection;
			}
			set
			{
				if ((this._AddNewCollection != value))
				{
					this.OnAddNewCollectionChanging(value);
					this.SendPropertyChanging();
					this._AddNewCollection = value;
					this.SendPropertyChanged("AddNewCollection");
					this.OnAddNewCollectionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Clone", DbType="Bit")]
		public System.Nullable<bool> Clone
		{
			get
			{
				return this._Clone;
			}
			set
			{
				if ((this._Clone != value))
				{
					this.OnCloneChanging(value);
					this.SendPropertyChanging();
					this._Clone = value;
					this.SendPropertyChanged("Clone");
					this.OnCloneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupportEmailAddress", DbType="NVarChar(255)")]
		public string SupportEmailAddress
		{
			get
			{
				return this._SupportEmailAddress;
			}
			set
			{
				if ((this._SupportEmailAddress != value))
				{
					this.OnSupportEmailAddressChanging(value);
					this.SendPropertyChanging();
					this._SupportEmailAddress = value;
					this.SendPropertyChanged("SupportEmailAddress");
					this.OnSupportEmailAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShowSupportEmailAddress", DbType="Bit")]
		public System.Nullable<bool> ShowSupportEmailAddress
		{
			get
			{
				return this._ShowSupportEmailAddress;
			}
			set
			{
				if ((this._ShowSupportEmailAddress != value))
				{
					this.OnShowSupportEmailAddressChanging(value);
					this.SendPropertyChanging();
					this._ShowSupportEmailAddress = value;
					this.SendPropertyChanged("ShowSupportEmailAddress");
					this.OnShowSupportEmailAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupportPhoneNumber", DbType="NVarChar(255)")]
		public string SupportPhoneNumber
		{
			get
			{
				return this._SupportPhoneNumber;
			}
			set
			{
				if ((this._SupportPhoneNumber != value))
				{
					this.OnSupportPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._SupportPhoneNumber = value;
					this.SendPropertyChanged("SupportPhoneNumber");
					this.OnSupportPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShowSupportPhoneNumber", DbType="Bit")]
		public System.Nullable<bool> ShowSupportPhoneNumber
		{
			get
			{
				return this._ShowSupportPhoneNumber;
			}
			set
			{
				if ((this._ShowSupportPhoneNumber != value))
				{
					this.OnShowSupportPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._ShowSupportPhoneNumber = value;
					this.SendPropertyChanged("ShowSupportPhoneNumber");
					this.OnShowSupportPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupportWebSiteURL", DbType="NVarChar(255)")]
		public string SupportWebSiteURL
		{
			get
			{
				return this._SupportWebSiteURL;
			}
			set
			{
				if ((this._SupportWebSiteURL != value))
				{
					this.OnSupportWebSiteURLChanging(value);
					this.SendPropertyChanging();
					this._SupportWebSiteURL = value;
					this.SendPropertyChanged("SupportWebSiteURL");
					this.OnSupportWebSiteURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShowSupportWebSiteURL", DbType="Bit")]
		public System.Nullable<bool> ShowSupportWebSiteURL
		{
			get
			{
				return this._ShowSupportWebSiteURL;
			}
			set
			{
				if ((this._ShowSupportWebSiteURL != value))
				{
					this.OnShowSupportWebSiteURLChanging(value);
					this.SendPropertyChanging();
					this._ShowSupportWebSiteURL = value;
					this.SendPropertyChanged("ShowSupportWebSiteURL");
					this.OnShowSupportWebSiteURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Product", DbType="Int")]
		public System.Nullable<int> Product
		{
			get
			{
				return this._Product;
			}
			set
			{
				if ((this._Product != value))
				{
					this.OnProductChanging(value);
					this.SendPropertyChanging();
					this._Product = value;
					this.SendPropertyChanged("Product");
					this.OnProductChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="License_LicenseFeature", Storage="_License", ThisKey="LicenseID", OtherKey="ID", IsForeignKey=true)]
		public License License
		{
			get
			{
				return this._License.Entity;
			}
			set
			{
				License previousValue = this._License.Entity;
				if (((previousValue != value) 
							|| (this._License.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._License.Entity = null;
						previousValue.LicenseFeatures.Remove(this);
					}
					this._License.Entity = value;
					if ((value != null))
					{
						value.LicenseFeatures.Add(this);
						this._LicenseID = value.ID;
					}
					else
					{
						this._LicenseID = default(int);
					}
					this.SendPropertyChanged("License");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
