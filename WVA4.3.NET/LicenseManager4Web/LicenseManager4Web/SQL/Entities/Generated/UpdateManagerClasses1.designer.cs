#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LicenseManager4Web.DataContext
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="LicenseManager")]
	public partial class UpdateManagerClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertUpdateFile(LicenseManager4Web.Entities.UpdateFile instance);
    partial void UpdateUpdateFile(LicenseManager4Web.Entities.UpdateFile instance);
    partial void DeleteUpdateFile(LicenseManager4Web.Entities.UpdateFile instance);
    partial void InsertVersion(LicenseManager4Web.Entities.Version instance);
    partial void UpdateVersion(LicenseManager4Web.Entities.Version instance);
    partial void DeleteVersion(LicenseManager4Web.Entities.Version instance);
    partial void InsertUpdate(LicenseManager4Web.Entities.Update instance);
    partial void UpdateUpdate(LicenseManager4Web.Entities.Update instance);
    partial void DeleteUpdate(LicenseManager4Web.Entities.Update instance);
    partial void InsertUpdatesApplication(LicenseManager4Web.Entities.UpdatesApplication instance);
    partial void UpdateUpdatesApplication(LicenseManager4Web.Entities.UpdatesApplication instance);
    partial void DeleteUpdatesApplication(LicenseManager4Web.Entities.UpdatesApplication instance);
    partial void InsertUpdateSeries(LicenseManager4Web.Entities.UpdateSeries instance);
    partial void UpdateUpdateSeries(LicenseManager4Web.Entities.UpdateSeries instance);
    partial void DeleteUpdateSeries(LicenseManager4Web.Entities.UpdateSeries instance);
    partial void InsertUpdatesVersion(LicenseManager4Web.Entities.UpdatesVersion instance);
    partial void UpdateUpdatesVersion(LicenseManager4Web.Entities.UpdatesVersion instance);
    partial void DeleteUpdatesVersion(LicenseManager4Web.Entities.UpdatesVersion instance);
    #endregion
		
		public UpdateManagerClassesDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["LicenseManagerConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public UpdateManagerClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public UpdateManagerClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public UpdateManagerClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public UpdateManagerClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<LicenseManager4Web.Entities.UpdateFile> UpdateFiles
		{
			get
			{
				return this.GetTable<LicenseManager4Web.Entities.UpdateFile>();
			}
		}
		
		public System.Data.Linq.Table<LicenseManager4Web.Entities.Version> Versions
		{
			get
			{
				return this.GetTable<LicenseManager4Web.Entities.Version>();
			}
		}
		
		public System.Data.Linq.Table<LicenseManager4Web.Entities.Update> Updates
		{
			get
			{
				return this.GetTable<LicenseManager4Web.Entities.Update>();
			}
		}
		
		public System.Data.Linq.Table<LicenseManager4Web.Entities.UpdatesApplication> UpdatesApplications
		{
			get
			{
				return this.GetTable<LicenseManager4Web.Entities.UpdatesApplication>();
			}
		}
		
		public System.Data.Linq.Table<LicenseManager4Web.Entities.UpdateSeries> UpdateSeries
		{
			get
			{
				return this.GetTable<LicenseManager4Web.Entities.UpdateSeries>();
			}
		}
		
		public System.Data.Linq.Table<LicenseManager4Web.Entities.UpdatesVersion> UpdatesVersions
		{
			get
			{
				return this.GetTable<LicenseManager4Web.Entities.UpdatesVersion>();
			}
		}
		
		public System.Data.Linq.Table<LicenseManager4Web.Entities.ApplicationUpdate> ApplicationUpdates
		{
			get
			{
				return this.GetTable<LicenseManager4Web.Entities.ApplicationUpdate>();
			}
		}
	}
}
namespace LicenseManager4Web.Entities
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UpdateFiles")]
	public partial class UpdateFile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.Guid _UpdateId;
		
		private string _FileName;
		
		private System.Data.Linq.Binary _File;
		
		private string _InstallPath;
		
		private bool _IsComplete;
		
		private System.DateTime _DateCreated;
		
		private System.Nullable<System.DateTime> _DateFinished;
		
		private EntityRef<Update> _Update;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnUpdateIdChanging(System.Guid value);
    partial void OnUpdateIdChanged();
    partial void OnFileNameChanging(string value);
    partial void OnFileNameChanged();
    partial void OnFileChanging(System.Data.Linq.Binary value);
    partial void OnFileChanged();
    partial void OnInstallPathChanging(string value);
    partial void OnInstallPathChanged();
    partial void OnIsCompleteChanging(bool value);
    partial void OnIsCompleteChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDateFinishedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateFinishedChanged();
    #endregion
		
		public UpdateFile()
		{
			this._Update = default(EntityRef<Update>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UpdateId
		{
			get
			{
				return this._UpdateId;
			}
			set
			{
				if ((this._UpdateId != value))
				{
					if (this._Update.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUpdateIdChanging(value);
					this.SendPropertyChanging();
					this._UpdateId = value;
					this.SendPropertyChanged("UpdateId");
					this.OnUpdateIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string FileName
		{
			get
			{
				return this._FileName;
			}
			set
			{
				if ((this._FileName != value))
				{
					this.OnFileNameChanging(value);
					this.SendPropertyChanging();
					this._FileName = value;
					this.SendPropertyChanged("FileName");
					this.OnFileNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[File]", Storage="_File", DbType="VarBinary(MAX)", CanBeNull=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary File
		{
			get
			{
				return this._File;
			}
			set
			{
				if ((this._File != value))
				{
					this.OnFileChanging(value);
					this.SendPropertyChanging();
					this._File = value;
					this.SendPropertyChanged("File");
					this.OnFileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InstallPath", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string InstallPath
		{
			get
			{
				return this._InstallPath;
			}
			set
			{
				if ((this._InstallPath != value))
				{
					this.OnInstallPathChanging(value);
					this.SendPropertyChanging();
					this._InstallPath = value;
					this.SendPropertyChanged("InstallPath");
					this.OnInstallPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsComplete", DbType="Bit NOT NULL")]
		public bool IsComplete
		{
			get
			{
				return this._IsComplete;
			}
			set
			{
				if ((this._IsComplete != value))
				{
					this.OnIsCompleteChanging(value);
					this.SendPropertyChanging();
					this._IsComplete = value;
					this.SendPropertyChanged("IsComplete");
					this.OnIsCompleteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateFinished", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateFinished
		{
			get
			{
				return this._DateFinished;
			}
			set
			{
				if ((this._DateFinished != value))
				{
					this.OnDateFinishedChanging(value);
					this.SendPropertyChanging();
					this._DateFinished = value;
					this.SendPropertyChanged("DateFinished");
					this.OnDateFinishedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Update_UpdateFile", Storage="_Update", ThisKey="UpdateId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Update Update
		{
			get
			{
				return this._Update.Entity;
			}
			set
			{
				Update previousValue = this._Update.Entity;
				if (((previousValue != value) 
							|| (this._Update.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Update.Entity = null;
						previousValue.UpdateFiles.Remove(this);
					}
					this._Update.Entity = value;
					if ((value != null))
					{
						value.UpdateFiles.Add(this);
						this._UpdateId = value.Id;
					}
					else
					{
						this._UpdateId = default(System.Guid);
					}
					this.SendPropertyChanged("Update");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Versions")]
	public partial class Version : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _VersionName;
		
		private EntitySet<UpdatesVersion> _UpdatesVersions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnVersionNameChanging(string value);
    partial void OnVersionNameChanged();
    #endregion
		
		public Version()
		{
			this._UpdatesVersions = new EntitySet<UpdatesVersion>(new Action<UpdatesVersion>(this.attach_UpdatesVersions), new Action<UpdatesVersion>(this.detach_UpdatesVersions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string VersionName
		{
			get
			{
				return this._VersionName;
			}
			set
			{
				if ((this._VersionName != value))
				{
					this.OnVersionNameChanging(value);
					this.SendPropertyChanging();
					this._VersionName = value;
					this.SendPropertyChanged("VersionName");
					this.OnVersionNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Version_UpdatesVersion", Storage="_UpdatesVersions", ThisKey="Id", OtherKey="VersionId")]
		public EntitySet<UpdatesVersion> UpdatesVersions
		{
			get
			{
				return this._UpdatesVersions;
			}
			set
			{
				this._UpdatesVersions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UpdatesVersions(UpdatesVersion entity)
		{
			this.SendPropertyChanging();
			entity.Version = this;
		}
		
		private void detach_UpdatesVersions(UpdatesVersion entity)
		{
			this.SendPropertyChanging();
			entity.Version = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Updates")]
	public partial class Update : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.Guid _UpdateSeriesId;
		
		private string _Name;
		
		private string _Description;
		
		private string _Message;
		
		private int _UpdateType;
		
		private System.DateTime _DateCreated;
		
		private System.DateTime _DateModified;
		
		private EntitySet<UpdateFile> _UpdateFiles;
		
		private EntitySet<UpdatesApplication> _UpdatesApplications;
		
		private EntityRef<UpdateSeries> _UpdateSeries;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnUpdateSeriesIdChanging(System.Guid value);
    partial void OnUpdateSeriesIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnMessageChanging(string value);
    partial void OnMessageChanged();
    partial void OnUpdateTypeChanging(int value);
    partial void OnUpdateTypeChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDateModifiedChanging(System.DateTime value);
    partial void OnDateModifiedChanged();
    #endregion
		
		public Update()
		{
			this._UpdateFiles = new EntitySet<UpdateFile>(new Action<UpdateFile>(this.attach_UpdateFiles), new Action<UpdateFile>(this.detach_UpdateFiles));
			this._UpdatesApplications = new EntitySet<UpdatesApplication>(new Action<UpdatesApplication>(this.attach_UpdatesApplications), new Action<UpdatesApplication>(this.detach_UpdatesApplications));
			this._UpdateSeries = default(EntityRef<UpdateSeries>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateSeriesId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UpdateSeriesId
		{
			get
			{
				return this._UpdateSeriesId;
			}
			set
			{
				if ((this._UpdateSeriesId != value))
				{
					if (this._UpdateSeries.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUpdateSeriesIdChanging(value);
					this.SendPropertyChanging();
					this._UpdateSeriesId = value;
					this.SendPropertyChanged("UpdateSeriesId");
					this.OnUpdateSeriesIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Message", DbType="NVarChar(MAX)")]
		public string Message
		{
			get
			{
				return this._Message;
			}
			set
			{
				if ((this._Message != value))
				{
					this.OnMessageChanging(value);
					this.SendPropertyChanging();
					this._Message = value;
					this.SendPropertyChanged("Message");
					this.OnMessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateType", DbType="Int NOT NULL")]
		public int UpdateType
		{
			get
			{
				return this._UpdateType;
			}
			set
			{
				if ((this._UpdateType != value))
				{
					this.OnUpdateTypeChanging(value);
					this.SendPropertyChanging();
					this._UpdateType = value;
					this.SendPropertyChanged("UpdateType");
					this.OnUpdateTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateModified", DbType="DateTime NOT NULL")]
		public System.DateTime DateModified
		{
			get
			{
				return this._DateModified;
			}
			set
			{
				if ((this._DateModified != value))
				{
					this.OnDateModifiedChanging(value);
					this.SendPropertyChanging();
					this._DateModified = value;
					this.SendPropertyChanged("DateModified");
					this.OnDateModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Update_UpdateFile", Storage="_UpdateFiles", ThisKey="Id", OtherKey="UpdateId")]
		public EntitySet<UpdateFile> UpdateFiles
		{
			get
			{
				return this._UpdateFiles;
			}
			set
			{
				this._UpdateFiles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Update_UpdatesApplication", Storage="_UpdatesApplications", ThisKey="Id", OtherKey="UpdateId")]
		public EntitySet<UpdatesApplication> UpdatesApplications
		{
			get
			{
				return this._UpdatesApplications;
			}
			set
			{
				this._UpdatesApplications.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UpdateSeries_Update", Storage="_UpdateSeries", ThisKey="UpdateSeriesId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public UpdateSeries UpdateSeries
		{
			get
			{
				return this._UpdateSeries.Entity;
			}
			set
			{
				UpdateSeries previousValue = this._UpdateSeries.Entity;
				if (((previousValue != value) 
							|| (this._UpdateSeries.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UpdateSeries.Entity = null;
						previousValue.Updates.Remove(this);
					}
					this._UpdateSeries.Entity = value;
					if ((value != null))
					{
						value.Updates.Add(this);
						this._UpdateSeriesId = value.Id;
					}
					else
					{
						this._UpdateSeriesId = default(System.Guid);
					}
					this.SendPropertyChanged("UpdateSeries");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UpdateFiles(UpdateFile entity)
		{
			this.SendPropertyChanging();
			entity.Update = this;
		}
		
		private void detach_UpdateFiles(UpdateFile entity)
		{
			this.SendPropertyChanging();
			entity.Update = null;
		}
		
		private void attach_UpdatesApplications(UpdatesApplication entity)
		{
			this.SendPropertyChanging();
			entity.Update = this;
		}
		
		private void detach_UpdatesApplications(UpdatesApplication entity)
		{
			this.SendPropertyChanging();
			entity.Update = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UpdatesApplication")]
	public partial class UpdatesApplication : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.Guid _UpdateId;
		
		private System.Guid _ApplicationId;
		
		private EntityRef<Update> _Update;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnUpdateIdChanging(System.Guid value);
    partial void OnUpdateIdChanged();
    partial void OnApplicationIdChanging(System.Guid value);
    partial void OnApplicationIdChanged();
    #endregion
		
		public UpdatesApplication()
		{
			this._Update = default(EntityRef<Update>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UpdateId
		{
			get
			{
				return this._UpdateId;
			}
			set
			{
				if ((this._UpdateId != value))
				{
					if (this._Update.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUpdateIdChanging(value);
					this.SendPropertyChanging();
					this._UpdateId = value;
					this.SendPropertyChanged("UpdateId");
					this.OnUpdateIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					this.OnApplicationIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationId = value;
					this.SendPropertyChanged("ApplicationId");
					this.OnApplicationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Update_UpdatesApplication", Storage="_Update", ThisKey="UpdateId", OtherKey="Id", IsForeignKey=true)]
		public Update Update
		{
			get
			{
				return this._Update.Entity;
			}
			set
			{
				Update previousValue = this._Update.Entity;
				if (((previousValue != value) 
							|| (this._Update.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Update.Entity = null;
						previousValue.UpdatesApplications.Remove(this);
					}
					this._Update.Entity = value;
					if ((value != null))
					{
						value.UpdatesApplications.Add(this);
						this._UpdateId = value.Id;
					}
					else
					{
						this._UpdateId = default(System.Guid);
					}
					this.SendPropertyChanged("Update");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UpdateSeries")]
	public partial class UpdateSeries : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _Name;
		
		private string _Description;
		
		private System.DateTime _DateCreated;
		
		private System.DateTime _DateModified;
		
		private EntitySet<Update> _Updates;
		
		private EntitySet<UpdatesVersion> _UpdatesVersions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDateModifiedChanging(System.DateTime value);
    partial void OnDateModifiedChanged();
    #endregion
		
		public UpdateSeries()
		{
			this._Updates = new EntitySet<Update>(new Action<Update>(this.attach_Updates), new Action<Update>(this.detach_Updates));
			this._UpdatesVersions = new EntitySet<UpdatesVersion>(new Action<UpdatesVersion>(this.attach_UpdatesVersions), new Action<UpdatesVersion>(this.detach_UpdatesVersions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateModified", DbType="DateTime NOT NULL")]
		public System.DateTime DateModified
		{
			get
			{
				return this._DateModified;
			}
			set
			{
				if ((this._DateModified != value))
				{
					this.OnDateModifiedChanging(value);
					this.SendPropertyChanging();
					this._DateModified = value;
					this.SendPropertyChanged("DateModified");
					this.OnDateModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UpdateSeries_Update", Storage="_Updates", ThisKey="Id", OtherKey="UpdateSeriesId")]
		public EntitySet<Update> Updates
		{
			get
			{
				return this._Updates;
			}
			set
			{
				this._Updates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UpdateSeries_UpdatesVersion", Storage="_UpdatesVersions", ThisKey="Id", OtherKey="UpdateSeriesId")]
		public EntitySet<UpdatesVersion> UpdatesVersions
		{
			get
			{
				return this._UpdatesVersions;
			}
			set
			{
				this._UpdatesVersions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Updates(Update entity)
		{
			this.SendPropertyChanging();
			entity.UpdateSeries = this;
		}
		
		private void detach_Updates(Update entity)
		{
			this.SendPropertyChanging();
			entity.UpdateSeries = null;
		}
		
		private void attach_UpdatesVersions(UpdatesVersion entity)
		{
			this.SendPropertyChanging();
			entity.UpdateSeries = this;
		}
		
		private void detach_UpdatesVersions(UpdatesVersion entity)
		{
			this.SendPropertyChanging();
			entity.UpdateSeries = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UpdatesVersions")]
	public partial class UpdatesVersion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.Guid _UpdateSeriesId;
		
		private System.Guid _VersionId;
		
		private EntityRef<UpdateSeries> _UpdateSeries;
		
		private EntityRef<Version> _Version;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnUpdateSeriesIdChanging(System.Guid value);
    partial void OnUpdateSeriesIdChanged();
    partial void OnVersionIdChanging(System.Guid value);
    partial void OnVersionIdChanged();
    #endregion
		
		public UpdatesVersion()
		{
			this._UpdateSeries = default(EntityRef<UpdateSeries>);
			this._Version = default(EntityRef<Version>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateSeriesId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UpdateSeriesId
		{
			get
			{
				return this._UpdateSeriesId;
			}
			set
			{
				if ((this._UpdateSeriesId != value))
				{
					if (this._UpdateSeries.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUpdateSeriesIdChanging(value);
					this.SendPropertyChanging();
					this._UpdateSeriesId = value;
					this.SendPropertyChanged("UpdateSeriesId");
					this.OnUpdateSeriesIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid VersionId
		{
			get
			{
				return this._VersionId;
			}
			set
			{
				if ((this._VersionId != value))
				{
					if (this._Version.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVersionIdChanging(value);
					this.SendPropertyChanging();
					this._VersionId = value;
					this.SendPropertyChanged("VersionId");
					this.OnVersionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UpdateSeries_UpdatesVersion", Storage="_UpdateSeries", ThisKey="UpdateSeriesId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public UpdateSeries UpdateSeries
		{
			get
			{
				return this._UpdateSeries.Entity;
			}
			set
			{
				UpdateSeries previousValue = this._UpdateSeries.Entity;
				if (((previousValue != value) 
							|| (this._UpdateSeries.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UpdateSeries.Entity = null;
						previousValue.UpdatesVersions.Remove(this);
					}
					this._UpdateSeries.Entity = value;
					if ((value != null))
					{
						value.UpdatesVersions.Add(this);
						this._UpdateSeriesId = value.Id;
					}
					else
					{
						this._UpdateSeriesId = default(System.Guid);
					}
					this.SendPropertyChanged("UpdateSeries");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Version_UpdatesVersion", Storage="_Version", ThisKey="VersionId", OtherKey="Id", IsForeignKey=true)]
		public Version Version
		{
			get
			{
				return this._Version.Entity;
			}
			set
			{
				Version previousValue = this._Version.Entity;
				if (((previousValue != value) 
							|| (this._Version.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Version.Entity = null;
						previousValue.UpdatesVersions.Remove(this);
					}
					this._Version.Entity = value;
					if ((value != null))
					{
						value.UpdatesVersions.Add(this);
						this._VersionId = value.Id;
					}
					else
					{
						this._VersionId = default(System.Guid);
					}
					this.SendPropertyChanged("Version");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ApplicationUpdates")]
	public partial class ApplicationUpdate
	{
		
		private System.Guid _Id;
		
		private System.Nullable<System.Guid> _ApplicationId;
		
		public ApplicationUpdate()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					this._ApplicationId = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
