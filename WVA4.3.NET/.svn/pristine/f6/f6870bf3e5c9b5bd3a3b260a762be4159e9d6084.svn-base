using System;
using System.Drawing;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using DataDynamics.ActiveReports;
using DataDynamics.ActiveReports.Document;
using System.Windows.Forms;
using System.Data;

using System.Text.RegularExpressions;
using System.Globalization;

namespace Reports
{
    /// <summary>
    /// Summary description for rptComparisoSiteDetails.
    /// </summary>
    public partial class rptComparisonSiteDetails : DataDynamics.ActiveReports.ActiveReport
    {
        private UserControls.ReportParameters _InputParameters;

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="parameters"></param>
		public rptComparisonSiteDetails(UserControls.ReportParameters parameters)
        {
            //
            // Required for Windows Form Designer support
            //
            InitializeComponent();
            _InputParameters = parameters;
        }

		private void Set3D()
        {
            if (bool.Parse(_InputParameters["Is3D"].ParamValue))
            {
                chartControl2.ChartAreas[0].Projection.ProjectionType = DataDynamics.ActiveReports.Chart.Graphics.ProjectionType.Orthogonal;
            }
            else
            {
                chartControl2.ChartAreas[0].Projection.ProjectionType = DataDynamics.ActiveReports.Chart.Graphics.ProjectionType.Identical;
            }
            
            for (int i = 0; i < this.chartControl2.Series.Count; i++)// bars used only for 2 series
            {
                DataDynamics.ActiveReports.Chart.Series s = this.chartControl2.Series[i];
                if (bool.Parse(_InputParameters["Is3D"].ParamValue))
                    s.Type = DataDynamics.ActiveReports.Chart.ChartType.Bar3D;
                else
                    s.Type = DataDynamics.ActiveReports.Chart.ChartType.Bar2D;
            }
        }
		private void SetHorizontal()
        {
            if (bool.Parse(_InputParameters["IsHorizontal"].ParamValue))
            {
                
                for (int i = 0; i < this.chartControl2.Series.Count; i++)// bars used only for 2 series
                {
                    DataDynamics.ActiveReports.Chart.Series s = this.chartControl2.Series[i];
                    s.ChartArea.SwapAxesDirection = true;
                    s.AxisX.LabelFont.Angle = 0;
                    s.AxisY.LabelFont.Angle = 45;
                    s.AxisX.TitleFont.Angle = -90;
                    s.AxisY.TitleFont.Angle = 0;
                    s.Marker.Label.Alignment = DataDynamics.ActiveReports.Chart.Alignment.Right;
                }
            }
        }
        private void SetLogo()
        {
            try
            {
                System.Drawing.Image img;
                if (_InputParameters["IsCustomLogo"] != null && bool.Parse(_InputParameters["IsCustomLogo"].ParamValue)
                    && VWA4Common.GlobalSettings.LogoUpperLeftStream != null)
                {
                    img = System.Drawing.Image.FromStream(VWA4Common.GlobalSettings.LogoUpperLeftStream);
                    //this.imgLogo.Height = (img.Height / img.VerticalResolution);
                    //this.imgLogo.Width = (img.Width / img.HorizontalResolution);
                    this.imgLogo.Image = img;
                }
                else
                    this.imgLogo.Visible = false;
                if (_InputParameters["IsLeanPathLogo"] != null && bool.Parse(_InputParameters["IsLeanPathLogo"].ParamValue)
                    && VWA4Common.GlobalSettings.LogoLowerRightStream != null)
                {
                    img = System.Drawing.Image.FromStream(VWA4Common.GlobalSettings.LogoLowerRightStream);
                    this.imgLeanPath.Image = img;
                }
                else
                    this.imgLeanPath.Visible = false;
            }
            catch (Exception ex)
            {
                MessageBox.Show(null, "Error loading logo: " + ex.Message, "Error loading image from file", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void AddSeries(int num)
        {
            // add legend
            //this.chartControl2.Legends["defaultLegend"].LegendItems.Add(new DataDynamics.ActiveReports.Chart.Legend());
            //create the series
            DataDynamics.ActiveReports.Chart.Series s = new DataDynamics.ActiveReports.Chart.Series();
            DataDynamics.ActiveReports.Chart.Series cS = new DataDynamics.ActiveReports.Chart.Series();
            s.Type = DataDynamics.ActiveReports.Chart.ChartType.StackedBar3D;
            cS.Type = DataDynamics.ActiveReports.Chart.ChartType.StackedBar3D;

            this.chartControl2.Series.AddRange(new DataDynamics.ActiveReports.Chart.Series[] { s, cS });
            this.chartControl2.Series[2 * num].Name = "Series1_" + num;
            this.chartControl2.Series[2 * num + 1].Name = "Series2_" + num;

            //this.chartControl2.Series[2 * i].Marker.Label.Font = new DataDynamics.ActiveReports.Chart.FontInfo(System.Drawing.Color.Black, new System.Drawing.Font("Arial", (_ChartData.Rows.Count > 20) ? 6F : 8F));
            //this.chartControl2.Series[2 * i + 1].Marker.Label.Font = new DataDynamics.ActiveReports.Chart.FontInfo(System.Drawing.Color.Black, new System.Drawing.Font("Arial", (_ChartData.Rows.Count > 20) ? 6F : 8F));


            
        }
        
        private void rptComparisoSiteDetails_ReportStart(object sender, EventArgs e)
        {
            //Dataset to hold data
            DataTable _ChartData = new DataTable();
            string criteria, top = "", title = ": $", end = "";
            VWA4Common.VWADBUtils.CheckWeightDates();

            //Dataset to hold data
            if (this.chartControl2.DataSource != null && ((System.Data.DataSet)this.chartControl2.DataSource).Tables.Count > 0)
                ((System.Data.DataSet)this.chartControl2.DataSource).Tables.Clear();
            else
                this.chartControl2.DataSource = new DataSet();

            this.chartControl2.ColorPalette = VWA4Common.VWACommon.GetPalette(_InputParameters["ChartColor"].ParamValue);
            this.chartControl2.Series[0].Properties["Gap"] = 100f;

            if (bool.Parse(_InputParameters["IsShowLbs"].ParamValue))
            {
                criteria = "SUM(Weight - NItems*ContainerWeight)";
                this.chartControl2.Series[0].AxisY.Title = "Waste, lbs.";
                this.chartControl2.Series[0].Marker.Label.Format = "{Value:#0} lbs";
                this.chartControl2.Series[1].Marker.Label.Format = "{Value:#0} lbs";
                title = ": ";
                end = " lbs";
            }
            else 
            {
                criteria = "SUM(WasteCost)";
                this.chartControl2.Series[0].AxisY.Title = "Waste ($)";
            }
            string select = "", where1 = "";
            
            if (_InputParameters["Filter"].ParamValue != "")
                where1 = " WHERE (" + _InputParameters["Filter"].ParamValue + ") AND SiteID = ";
            else
                where1 = " WHERE SiteID = ";

			bool isWasteClassesUsed = false; 

            if (int.Parse(_InputParameters["NumShown"].ParamValue) > 0)
                top = " TOP " + _InputParameters["NumShown"].ParamValue;

            DataTable siteDataTable = new DataTable();
            

            string sql = @"SELECT ID " +
                        " FROM Sites " +
                        " WHERE Active = True";
            siteDataTable = VWA4Common.DB.Retrieve(sql);


            string where = "";
            int i = 0;

            foreach (DataRow row in siteDataTable.Rows)
            {
                where = where1 + row.ItemArray[0].ToString() + " AND ";
                // mila: we are using magical number 0.0001 instead of 0 due Active Reports bug Case 109583: Bar chart doesn't render if series has zero values.
                if (_InputParameters["ComparisionType"].DisplayValue == "Days of Week")
                {
                    select = @"SELECT Name, Waste_" + i + ", Waste2_" + i + " FROM(" +
                        "SELECT " + top + " A.Name AS Name, Waste_" + i + ", Waste2_" + i + " " +
                        " FROM (SELECT Name, MAX(WasteValue) AS Waste_" + i + " FROM  " +
                        " (SELECT DISTINCT Weekday(Timestamp) AS Name, Format(Timestamp,'yyyymmdd'), 0.0001 AS WasteValue  " +
                        " FROM WeightDates WHERE " +
                        " (Timestamp >= #" + _InputParameters["FirstWeekStart"].ParamValue + "# AND Timestamp < #" +
                        DateTime.Parse(_InputParameters["FirstWeekStart"].ParamValue, CultureInfo.GetCultureInfo("en-US"), System.Globalization.DateTimeStyles.None).AddDays(7).ToString("MM/dd/yyyy", CultureInfo.GetCultureInfo("en-US")) + "#) " +
                        " UNION     " +
                        " SELECT Weekday(Weights.Timestamp) AS Name, Format(Weights.Timestamp,'yyyymmdd'), " + criteria + " AS WasteValue  " +
                        " FROM ((Weights LEFT JOIN Transfers ON Transfers.TransKey = Weights.TransKey) LEFT JOIN LossType ON Weights.LossTypeID = LossType.TypeID)  " +
                        (isWasteClassesUsed ? " LEFT JOIN FoodType ON Weights.FoodTypeID = FoodType.TypeID " : "") +
                        where + 
                        " (Weights.Timestamp >= #" + _InputParameters["FirstWeekStart"].ParamValue + "# AND Weights.Timestamp < #" +
                        DateTime.Parse(_InputParameters["FirstWeekStart"].ParamValue, CultureInfo.GetCultureInfo("en-US"), System.Globalization.DateTimeStyles.None).AddDays(7).ToString("MM/dd/yyyy", CultureInfo.GetCultureInfo("en-US")) + "#) " +
                        " GROUP BY Weekday(Weights.Timestamp), Format(Weights.Timestamp,'yyyymmdd')) " +
                        " GROUP BY Name )  AS A,   " +
                        " (SELECT Name, MAX(WasteValue) AS Waste2_" + i + " FROM  " +
                        " (SELECT DISTINCT Weekday(Timestamp) AS Name, Format(Timestamp,'yyyymmdd'), 0.0001 AS WasteValue  " +
                        " FROM WeightDates  WHERE " +
                        " (Timestamp >= #" + _InputParameters["SecondWeekStart"].ParamValue + "# AND Timestamp < #" +
                        DateTime.Parse(_InputParameters["SecondWeekStart"].ParamValue, CultureInfo.GetCultureInfo("en-US"), System.Globalization.DateTimeStyles.None).AddDays(7).ToString("MM/dd/yyyy", CultureInfo.GetCultureInfo("en-US")) + "#) " +
                        " UNION  " +
                        " SELECT Weekday(Weights.Timestamp) AS Name, Format(Weights.Timestamp,'yyyymmdd'), " + criteria + " AS WasteValue  " +
                        " FROM ((Weights LEFT JOIN Transfers ON Transfers.TransKey = Weights.TransKey) LEFT JOIN LossType ON Weights.LossTypeID = LossType.TypeID)   " +
                        (isWasteClassesUsed ? " LEFT JOIN FoodType ON Weights.FoodTypeID = FoodType.TypeID " : "") +
                        where +
                        " (Weights.Timestamp >= #" + _InputParameters["SecondWeekStart"].ParamValue +
                        "# AND Weights.Timestamp < #" +
                        DateTime.Parse(_InputParameters["SecondWeekStart"].ParamValue, CultureInfo.GetCultureInfo("en-US"), System.Globalization.DateTimeStyles.None).AddDays(7).ToString("MM/dd/yyyy", CultureInfo.GetCultureInfo("en-US")) + "#) " +
                        " GROUP BY Weekday(Weights.Timestamp), Format(Weights.Timestamp,'yyyymmdd')) " +
                        " GROUP BY Name )  AS  B " +
                        " WHERE A.Name=B.Name AND (A.Waste_" + i + " > 0.0001 OR B.Waste2_" + i + " > 0.0001)   ORDER BY A.Name ASC)" +
                        "ORDER BY Name " + (bool.Parse(_InputParameters["IsHorizontal"].ParamValue) ? " DESC;" : " ASC;");
                }
                else
                {
                    string typeComparision = "Food";
                    if (_InputParameters["ComparisionType"].DisplayValue == "Loss Categories")
                        typeComparision = "Loss";
                    else if (_InputParameters["ComparisionType"].DisplayValue == "Stations")
                        typeComparision = "Station";
                    select = @"SELECT Name, Waste_" + i + ", Waste2_" + i + " FROM(" +
                        "SELECT " + top + " A.Name AS Name, Waste_" + i + ", Waste2_" + i + "" +
                        " FROM ( SELECT Name, MAX(WasteValue) AS Waste_" + i + " FROM " +
                        "(SELECT DISTINCT TypeName AS Name, 0.0001 AS WasteValue FROM " + typeComparision + "Type " +
                        " UNION   " +
                        " SELECT " + typeComparision + "Type.TypeName AS Name, " + criteria + " AS WasteValue " +
                        " FROM (((Weights LEFT JOIN Transfers ON Transfers.TransKey = Weights.TransKey) LEFT JOIN LossType ON Weights.LossTypeID = LossType.TypeID) " +
                        ((typeComparision == "Loss") ? ")" :
                        " LEFT JOIN " + typeComparision + "Type ON Weights." + typeComparision + "TypeID = " + typeComparision + "Type.TypeID )") +
                        (isWasteClassesUsed && (typeComparision != "Food") ? " LEFT JOIN FoodType ON Weights.FoodTypeID = FoodType.TypeID) " : "") +
                        where +
                        " (Weights.Timestamp >= #" + _InputParameters["FirstWeekStart"].ParamValue +
                        "# AND Weights.Timestamp < #" +
                        DateTime.Parse(_InputParameters["FirstWeekStart"].ParamValue, CultureInfo.GetCultureInfo("en-US"), System.Globalization.DateTimeStyles.None).AddDays(7).ToString("MM/dd/yyyy", CultureInfo.GetCultureInfo("en-US")) + "#) " +
                        " GROUP BY " + typeComparision + "Type.TypeName ) " +
                        " GROUP BY Name )  AS A, " +
                        " (SELECT Name, MAX(WasteValue) AS Waste2_" + i + " FROM " +
                        " (SELECT DISTINCT TypeName AS Name, 0.0001 AS WasteValue FROM  " + typeComparision + "Type  " +
                        " UNION   SELECT " + typeComparision + "Type.TypeName AS Name, " + criteria + " AS WasteValue  " +
                        " FROM (((Weights LEFT JOIN Transfers ON Transfers.TransKey = Weights.TransKey) LEFT JOIN LossType ON Weights.LossTypeID = LossType.TypeID) " +
                        ((typeComparision == "Loss") ? ")" :
                        "  LEFT JOIN " + typeComparision + "Type ON Weights." + typeComparision + "TypeID = " + typeComparision + "Type.TypeID )") +
                        (isWasteClassesUsed && (typeComparision != "Food") ? " LEFT JOIN FoodType ON Weights.FoodTypeID = FoodType.TypeID " : "") +
                        where +
                        " (Weights.Timestamp >= #" + _InputParameters["SecondWeekStart"].ParamValue +
                        "# AND Weights.Timestamp < #" +
                        DateTime.Parse(_InputParameters["SecondWeekStart"].ParamValue, CultureInfo.GetCultureInfo("en-US"), System.Globalization.DateTimeStyles.None).AddDays(7).ToString("MM/dd/yyyy", CultureInfo.GetCultureInfo("en-US")) + "#) " +
                        " GROUP BY " + typeComparision + "Type.TypeName  ) " +
                        " GROUP BY Name )  AS B " +
                        " WHERE A.Name=B.Name AND (A.Waste_" + i + " > 0.0001 OR B.Waste2_" + i + " > 0.0001) " +
                        " ORDER BY A.Waste_" + i + " DESC)" +
                        "ORDER BY Waste_" + i + " " + (bool.Parse(_InputParameters["IsHorizontal"].ParamValue) ? " ASC;" : " DESC;");
                    this.chartControl2.Series[0].AxisX.Title = Regex.Split(_InputParameters["ComparisionType"].DisplayValue, " ")[0] + " Type";
                }

                DataTable dt = VWA4Common.DB.Retrieve(select);
                

                if (dt.Rows.Count > 0)
                {
                    ((System.Data.DataSet)this.chartControl2.DataSource).Tables.Add(dt);
                    AddSeries(i);

                    double max = Math.Max(double.Parse(dt.Compute("Max(Waste_" + i + ")", "").ToString()),
                        double.Parse(dt.Compute("Max(Waste2_" + i + ")", "").ToString()));

                    
                    this.chartControl2.ChartAreas[0].Axes["AxisY"].MajorTick.Step = VWA4Common.VWACommon.GetStep((int)max, 0);

                    
                     
                    this.chartControl2.Series[2 * i].ValueMembersY = "Waste_" + i;
                    this.chartControl2.Series[2 * i].ValueMemberX = "Name";
                    this.chartControl2.Series[2 * i + 1].ValueMembersY = "Waste2_" + i;
                    this.chartControl2.Series[2 * i + 1].ValueMemberX = "Name";

                    if (_InputParameters["ComparisionPeriod"].DisplayValue == "None")
                        this.chartControl2.Series[2 * i + 1].Visible = false;

                    DataTable total = VWA4Common.DB.Retrieve(@"SELECT " + criteria + " FROM Weights LEFT JOIN Transfers ON Transfers.TransKey = Weights.TransKey " +
                        " WHERE [Weights.Timestamp] >= #" + _InputParameters["FirstWeekStart"].ParamValue +
                        "# AND [Weights.Timestamp] < #" +
                        DateTime.Parse(_InputParameters["FirstWeekStart"].ParamValue, CultureInfo.GetCultureInfo("en-US"), System.Globalization.DateTimeStyles.None).AddDays(7).ToString("MM/dd/yyyy", CultureInfo.GetCultureInfo("en-US")) + "#" +
                                " AND SiteID = " + row.ItemArray[0].ToString());
                    double totalWeek1 = 0;
                    if (total.Rows[0][0].ToString() != "")
                        totalWeek1 = double.Parse(total.Rows[0][0].ToString());
                    string testquery = @"SELECT " + criteria + " FROM Weights LEFT JOIN Transfers ON Transfers.TransKey = Weights.TransKey " +
                        " WHERE [Weights.Timestamp] >= #" + _InputParameters["SecondWeekStart"].ParamValue +
                        "# AND [Weights.Timestamp] < #" +
                        DateTime.Parse(_InputParameters["SecondWeekStart"].ParamValue, CultureInfo.GetCultureInfo("en-US"), System.Globalization.DateTimeStyles.None).AddDays(7).ToString("MM/dd/yyyy", CultureInfo.GetCultureInfo("en-US")) + "#" +
                                " AND SiteID = " + row.ItemArray[0].ToString();
                    total = VWA4Common.DB.Retrieve(testquery);
                    double totalWeek2 = 0;
                    if (total.Rows[0][0].ToString() != "")
                        totalWeek2 = double.Parse(total.Rows[0][0].ToString());
                    this.chartControl2.Series[2 * i].Name = "Week 1: " + _InputParameters["FirstWeekStart"].DisplayValue + " Total" + title + totalWeek1.ToString("0") + end
                        + ", Filtered" + title + decimal.Parse(dt.Compute("Sum(Waste_" + i + ")", "").ToString()).ToString("0") + end;
                    this.chartControl2.Series[2 * i + 1].Name = "Week 2: " + _InputParameters["SecondWeekStart"].DisplayValue + " Total" + title + totalWeek2.ToString("0") + end
                        + ", Filtered" + title + decimal.Parse(dt.Compute("Sum(Waste2_" + i + ")", "").ToString()).ToString("0") + end;

                    
                    if (_InputParameters["ComparisionType"].DisplayValue == "Days of Week")
                    {
                        DateTime firstDayOfWeek = DateTime.Parse(_InputParameters["FirstWeekStart"].ParamValue, CultureInfo.GetCultureInfo("en-US"), System.Globalization.DateTimeStyles.None);
                        for (int j = 0; j < 7; j++)
                            if (firstDayOfWeek.DayOfWeek == VWA4Common.VWACommon.AccessFirstDayOfWeek)
                                break;
                            else
                                firstDayOfWeek = firstDayOfWeek.AddDays(1);
                        foreach (DataRow dt_row in dt.Rows)
                            this.chartControl2.ChartAreas[0].Axes[0].Labels.Add(firstDayOfWeek.AddDays(int.Parse(dt_row["Name"].ToString()) - 1).DayOfWeek.ToString());
                    }

                    i++;
                }
            }


               
                

                Set3D();
                SetHorizontal();

                lblTitle.Text = "Comparison report for " + _InputParameters["ComparisionType"].DisplayValue;
                if (_InputParameters["Title"] != null && _InputParameters["Title"].ParamValue != "")
                    this.lblTitle.Text = _InputParameters["Title"].ParamValue;
                txtSubTitle.Text = _InputParameters["SubTitle"].ParamValue;
                

                if (!Boolean.Parse(_InputParameters["IsToggleFooter"].ParamValue))
                {
                    if (_InputParameters["Filter"] != null && _InputParameters["Filter"].ParamValue != "")
                        txtFilter.Text = "Filter used: " + _InputParameters["Filter"].DisplayValue;

                    this.lblDB.Text = "Current DataBase:" + UserControls.VWAPath.ViewWasteDBName;
                }
            //else
            //{
            //    if (bool.Parse(VWA4Common.GlobalSettings.ShowEmptyReports))
            //    {
            //        this.chartControl2.Visible = false;
            //        imgLogo.Visible = false;
            //        if (!Boolean.Parse(_InputParameters["IsToggleFooter"].ParamValue))
            //            lblWarning.Text = "No data found for: weeks " + _InputParameters["FirstWeekStart"].ParamValue + " and " + _InputParameters["SecondWeekStart"].ParamValue + (_InputParameters["Filter"].DisplayValue == "" ? "" : " and " + _InputParameters["Filter"].DisplayValue);
            //    }
            //    else
            //        this.Cancel();
            //}
            this.Document.Printer.Landscape = true;
            //this.PrintWidth = this.PageSettings.PaperHeight - (this.PageSettings.Margins.Top + this.PageSettings.Margins.Bottom);
        }
    }
}
