//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.1.
// 
#pragma warning disable 1591

namespace VWAUpdater.com.licensemanager4web {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="LicenseManagerWebServiceSoap", Namespace="http://tempuri.org/")]
    public partial class LicenseManagerWebService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback ActivateLicenseOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddActivationOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetActivationByIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveActivationCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveActivationOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetActivationsByLicenseIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsActivatedOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateLicenseOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveLicenseOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLicenseByIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLicenseFeatureParamsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllLicensesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLicensesByClientIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLicensesByClientIdAndSiteIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteClientOperationCompleted;
        
        private System.Threading.SendOrPostCallback ClientHasActiveLicensesOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateClientOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveClientOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetClientByIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllClientsOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteSiteOperationCompleted;
        
        private System.Threading.SendOrPostCallback SiteHasActiveLicensesOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateSiteOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveSiteOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSiteByIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllSitesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllSitesByClientIdOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public LicenseManagerWebService() {
            this.Url = global::VWAUpdater.Properties.Settings.Default.VWAUpdater_com_licensemanager4web_LicenseManagerWebService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event ActivateLicenseCompletedEventHandler ActivateLicenseCompleted;
        
        /// <remarks/>
        public event AddActivationCompletedEventHandler AddActivationCompleted;
        
        /// <remarks/>
        public event GetActivationByIdCompletedEventHandler GetActivationByIdCompleted;
        
        /// <remarks/>
        public event SaveActivationCodeCompletedEventHandler SaveActivationCodeCompleted;
        
        /// <remarks/>
        public event SaveActivationCompletedEventHandler SaveActivationCompleted;
        
        /// <remarks/>
        public event GetActivationsByLicenseIdCompletedEventHandler GetActivationsByLicenseIdCompleted;
        
        /// <remarks/>
        public event IsActivatedCompletedEventHandler IsActivatedCompleted;
        
        /// <remarks/>
        public event CreateLicenseCompletedEventHandler CreateLicenseCompleted;
        
        /// <remarks/>
        public event SaveLicenseCompletedEventHandler SaveLicenseCompleted;
        
        /// <remarks/>
        public event GetLicenseByIdCompletedEventHandler GetLicenseByIdCompleted;
        
        /// <remarks/>
        public event GetLicenseFeatureParamsCompletedEventHandler GetLicenseFeatureParamsCompleted;
        
        /// <remarks/>
        public event GetAllLicensesCompletedEventHandler GetAllLicensesCompleted;
        
        /// <remarks/>
        public event GetLicensesByClientIdCompletedEventHandler GetLicensesByClientIdCompleted;
        
        /// <remarks/>
        public event GetLicensesByClientIdAndSiteIdCompletedEventHandler GetLicensesByClientIdAndSiteIdCompleted;
        
        /// <remarks/>
        public event DeleteClientCompletedEventHandler DeleteClientCompleted;
        
        /// <remarks/>
        public event ClientHasActiveLicensesCompletedEventHandler ClientHasActiveLicensesCompleted;
        
        /// <remarks/>
        public event CreateClientCompletedEventHandler CreateClientCompleted;
        
        /// <remarks/>
        public event SaveClientCompletedEventHandler SaveClientCompleted;
        
        /// <remarks/>
        public event GetClientByIdCompletedEventHandler GetClientByIdCompleted;
        
        /// <remarks/>
        public event GetAllClientsCompletedEventHandler GetAllClientsCompleted;
        
        /// <remarks/>
        public event DeleteSiteCompletedEventHandler DeleteSiteCompleted;
        
        /// <remarks/>
        public event SiteHasActiveLicensesCompletedEventHandler SiteHasActiveLicensesCompleted;
        
        /// <remarks/>
        public event CreateSiteCompletedEventHandler CreateSiteCompleted;
        
        /// <remarks/>
        public event SaveSiteCompletedEventHandler SaveSiteCompleted;
        
        /// <remarks/>
        public event GetSiteByIdCompletedEventHandler GetSiteByIdCompleted;
        
        /// <remarks/>
        public event GetAllSitesCompletedEventHandler GetAllSitesCompleted;
        
        /// <remarks/>
        public event GetAllSitesByClientIdCompletedEventHandler GetAllSitesByClientIdCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ActivateLicense", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Activation ActivateLicense(int licenseId, string cpuID) {
            object[] results = this.Invoke("ActivateLicense", new object[] {
                        licenseId,
                        cpuID});
            return ((Activation)(results[0]));
        }
        
        /// <remarks/>
        public void ActivateLicenseAsync(int licenseId, string cpuID) {
            this.ActivateLicenseAsync(licenseId, cpuID, null);
        }
        
        /// <remarks/>
        public void ActivateLicenseAsync(int licenseId, string cpuID, object userState) {
            if ((this.ActivateLicenseOperationCompleted == null)) {
                this.ActivateLicenseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnActivateLicenseOperationCompleted);
            }
            this.InvokeAsync("ActivateLicense", new object[] {
                        licenseId,
                        cpuID}, this.ActivateLicenseOperationCompleted, userState);
        }
        
        private void OnActivateLicenseOperationCompleted(object arg) {
            if ((this.ActivateLicenseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ActivateLicenseCompleted(this, new ActivateLicenseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddActivation", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AddActivation(ActivationParams p) {
            object[] results = this.Invoke("AddActivation", new object[] {
                        p});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddActivationAsync(ActivationParams p) {
            this.AddActivationAsync(p, null);
        }
        
        /// <remarks/>
        public void AddActivationAsync(ActivationParams p, object userState) {
            if ((this.AddActivationOperationCompleted == null)) {
                this.AddActivationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddActivationOperationCompleted);
            }
            this.InvokeAsync("AddActivation", new object[] {
                        p}, this.AddActivationOperationCompleted, userState);
        }
        
        private void OnAddActivationOperationCompleted(object arg) {
            if ((this.AddActivationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddActivationCompleted(this, new AddActivationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetActivationById", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Activation GetActivationById(int activationId) {
            object[] results = this.Invoke("GetActivationById", new object[] {
                        activationId});
            return ((Activation)(results[0]));
        }
        
        /// <remarks/>
        public void GetActivationByIdAsync(int activationId) {
            this.GetActivationByIdAsync(activationId, null);
        }
        
        /// <remarks/>
        public void GetActivationByIdAsync(int activationId, object userState) {
            if ((this.GetActivationByIdOperationCompleted == null)) {
                this.GetActivationByIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetActivationByIdOperationCompleted);
            }
            this.InvokeAsync("GetActivationById", new object[] {
                        activationId}, this.GetActivationByIdOperationCompleted, userState);
        }
        
        private void OnGetActivationByIdOperationCompleted(object arg) {
            if ((this.GetActivationByIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetActivationByIdCompleted(this, new GetActivationByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SaveActivationCode", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SaveActivationCode(int activationId, string activationCode) {
            object[] results = this.Invoke("SaveActivationCode", new object[] {
                        activationId,
                        activationCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SaveActivationCodeAsync(int activationId, string activationCode) {
            this.SaveActivationCodeAsync(activationId, activationCode, null);
        }
        
        /// <remarks/>
        public void SaveActivationCodeAsync(int activationId, string activationCode, object userState) {
            if ((this.SaveActivationCodeOperationCompleted == null)) {
                this.SaveActivationCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveActivationCodeOperationCompleted);
            }
            this.InvokeAsync("SaveActivationCode", new object[] {
                        activationId,
                        activationCode}, this.SaveActivationCodeOperationCompleted, userState);
        }
        
        private void OnSaveActivationCodeOperationCompleted(object arg) {
            if ((this.SaveActivationCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveActivationCodeCompleted(this, new SaveActivationCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SaveActivation", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SaveActivation(ActivationParams p) {
            object[] results = this.Invoke("SaveActivation", new object[] {
                        p});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SaveActivationAsync(ActivationParams p) {
            this.SaveActivationAsync(p, null);
        }
        
        /// <remarks/>
        public void SaveActivationAsync(ActivationParams p, object userState) {
            if ((this.SaveActivationOperationCompleted == null)) {
                this.SaveActivationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveActivationOperationCompleted);
            }
            this.InvokeAsync("SaveActivation", new object[] {
                        p}, this.SaveActivationOperationCompleted, userState);
        }
        
        private void OnSaveActivationOperationCompleted(object arg) {
            if ((this.SaveActivationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveActivationCompleted(this, new SaveActivationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetActivationsByLicenseId", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Activation[] GetActivationsByLicenseId(int id) {
            object[] results = this.Invoke("GetActivationsByLicenseId", new object[] {
                        id});
            return ((Activation[])(results[0]));
        }
        
        /// <remarks/>
        public void GetActivationsByLicenseIdAsync(int id) {
            this.GetActivationsByLicenseIdAsync(id, null);
        }
        
        /// <remarks/>
        public void GetActivationsByLicenseIdAsync(int id, object userState) {
            if ((this.GetActivationsByLicenseIdOperationCompleted == null)) {
                this.GetActivationsByLicenseIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetActivationsByLicenseIdOperationCompleted);
            }
            this.InvokeAsync("GetActivationsByLicenseId", new object[] {
                        id}, this.GetActivationsByLicenseIdOperationCompleted, userState);
        }
        
        private void OnGetActivationsByLicenseIdOperationCompleted(object arg) {
            if ((this.GetActivationsByLicenseIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetActivationsByLicenseIdCompleted(this, new GetActivationsByLicenseIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IsActivated", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string IsActivated(int licenseId, string cpuId) {
            object[] results = this.Invoke("IsActivated", new object[] {
                        licenseId,
                        cpuId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void IsActivatedAsync(int licenseId, string cpuId) {
            this.IsActivatedAsync(licenseId, cpuId, null);
        }
        
        /// <remarks/>
        public void IsActivatedAsync(int licenseId, string cpuId, object userState) {
            if ((this.IsActivatedOperationCompleted == null)) {
                this.IsActivatedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsActivatedOperationCompleted);
            }
            this.InvokeAsync("IsActivated", new object[] {
                        licenseId,
                        cpuId}, this.IsActivatedOperationCompleted, userState);
        }
        
        private void OnIsActivatedOperationCompleted(object arg) {
            if ((this.IsActivatedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsActivatedCompleted(this, new IsActivatedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateLicense", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CreateLicense(LicenseFeaturesParams p) {
            object[] results = this.Invoke("CreateLicense", new object[] {
                        p});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreateLicenseAsync(LicenseFeaturesParams p) {
            this.CreateLicenseAsync(p, null);
        }
        
        /// <remarks/>
        public void CreateLicenseAsync(LicenseFeaturesParams p, object userState) {
            if ((this.CreateLicenseOperationCompleted == null)) {
                this.CreateLicenseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateLicenseOperationCompleted);
            }
            this.InvokeAsync("CreateLicense", new object[] {
                        p}, this.CreateLicenseOperationCompleted, userState);
        }
        
        private void OnCreateLicenseOperationCompleted(object arg) {
            if ((this.CreateLicenseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateLicenseCompleted(this, new CreateLicenseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SaveLicense", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SaveLicense(LicenseFeaturesParams p) {
            object[] results = this.Invoke("SaveLicense", new object[] {
                        p});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SaveLicenseAsync(LicenseFeaturesParams p) {
            this.SaveLicenseAsync(p, null);
        }
        
        /// <remarks/>
        public void SaveLicenseAsync(LicenseFeaturesParams p, object userState) {
            if ((this.SaveLicenseOperationCompleted == null)) {
                this.SaveLicenseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveLicenseOperationCompleted);
            }
            this.InvokeAsync("SaveLicense", new object[] {
                        p}, this.SaveLicenseOperationCompleted, userState);
        }
        
        private void OnSaveLicenseOperationCompleted(object arg) {
            if ((this.SaveLicenseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveLicenseCompleted(this, new SaveLicenseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetLicenseById", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public License GetLicenseById(int id) {
            object[] results = this.Invoke("GetLicenseById", new object[] {
                        id});
            return ((License)(results[0]));
        }
        
        /// <remarks/>
        public void GetLicenseByIdAsync(int id) {
            this.GetLicenseByIdAsync(id, null);
        }
        
        /// <remarks/>
        public void GetLicenseByIdAsync(int id, object userState) {
            if ((this.GetLicenseByIdOperationCompleted == null)) {
                this.GetLicenseByIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLicenseByIdOperationCompleted);
            }
            this.InvokeAsync("GetLicenseById", new object[] {
                        id}, this.GetLicenseByIdOperationCompleted, userState);
        }
        
        private void OnGetLicenseByIdOperationCompleted(object arg) {
            if ((this.GetLicenseByIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLicenseByIdCompleted(this, new GetLicenseByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetLicenseFeatureParams", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LicenseFeaturesParams GetLicenseFeatureParams(int licenseId) {
            object[] results = this.Invoke("GetLicenseFeatureParams", new object[] {
                        licenseId});
            return ((LicenseFeaturesParams)(results[0]));
        }
        
        /// <remarks/>
        public void GetLicenseFeatureParamsAsync(int licenseId) {
            this.GetLicenseFeatureParamsAsync(licenseId, null);
        }
        
        /// <remarks/>
        public void GetLicenseFeatureParamsAsync(int licenseId, object userState) {
            if ((this.GetLicenseFeatureParamsOperationCompleted == null)) {
                this.GetLicenseFeatureParamsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLicenseFeatureParamsOperationCompleted);
            }
            this.InvokeAsync("GetLicenseFeatureParams", new object[] {
                        licenseId}, this.GetLicenseFeatureParamsOperationCompleted, userState);
        }
        
        private void OnGetLicenseFeatureParamsOperationCompleted(object arg) {
            if ((this.GetLicenseFeatureParamsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLicenseFeatureParamsCompleted(this, new GetLicenseFeatureParamsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAllLicenses", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public License[] GetAllLicenses() {
            object[] results = this.Invoke("GetAllLicenses", new object[0]);
            return ((License[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllLicensesAsync() {
            this.GetAllLicensesAsync(null);
        }
        
        /// <remarks/>
        public void GetAllLicensesAsync(object userState) {
            if ((this.GetAllLicensesOperationCompleted == null)) {
                this.GetAllLicensesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllLicensesOperationCompleted);
            }
            this.InvokeAsync("GetAllLicenses", new object[0], this.GetAllLicensesOperationCompleted, userState);
        }
        
        private void OnGetAllLicensesOperationCompleted(object arg) {
            if ((this.GetAllLicensesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllLicensesCompleted(this, new GetAllLicensesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetLicensesByClientId", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public License[] GetLicensesByClientId(int clientId) {
            object[] results = this.Invoke("GetLicensesByClientId", new object[] {
                        clientId});
            return ((License[])(results[0]));
        }
        
        /// <remarks/>
        public void GetLicensesByClientIdAsync(int clientId) {
            this.GetLicensesByClientIdAsync(clientId, null);
        }
        
        /// <remarks/>
        public void GetLicensesByClientIdAsync(int clientId, object userState) {
            if ((this.GetLicensesByClientIdOperationCompleted == null)) {
                this.GetLicensesByClientIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLicensesByClientIdOperationCompleted);
            }
            this.InvokeAsync("GetLicensesByClientId", new object[] {
                        clientId}, this.GetLicensesByClientIdOperationCompleted, userState);
        }
        
        private void OnGetLicensesByClientIdOperationCompleted(object arg) {
            if ((this.GetLicensesByClientIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLicensesByClientIdCompleted(this, new GetLicensesByClientIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetLicensesByClientIdAndSiteId", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public License[] GetLicensesByClientIdAndSiteId(int clientId, int siteId) {
            object[] results = this.Invoke("GetLicensesByClientIdAndSiteId", new object[] {
                        clientId,
                        siteId});
            return ((License[])(results[0]));
        }
        
        /// <remarks/>
        public void GetLicensesByClientIdAndSiteIdAsync(int clientId, int siteId) {
            this.GetLicensesByClientIdAndSiteIdAsync(clientId, siteId, null);
        }
        
        /// <remarks/>
        public void GetLicensesByClientIdAndSiteIdAsync(int clientId, int siteId, object userState) {
            if ((this.GetLicensesByClientIdAndSiteIdOperationCompleted == null)) {
                this.GetLicensesByClientIdAndSiteIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLicensesByClientIdAndSiteIdOperationCompleted);
            }
            this.InvokeAsync("GetLicensesByClientIdAndSiteId", new object[] {
                        clientId,
                        siteId}, this.GetLicensesByClientIdAndSiteIdOperationCompleted, userState);
        }
        
        private void OnGetLicensesByClientIdAndSiteIdOperationCompleted(object arg) {
            if ((this.GetLicensesByClientIdAndSiteIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLicensesByClientIdAndSiteIdCompleted(this, new GetLicensesByClientIdAndSiteIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteClient", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteClient(int clientId) {
            this.Invoke("DeleteClient", new object[] {
                        clientId});
        }
        
        /// <remarks/>
        public void DeleteClientAsync(int clientId) {
            this.DeleteClientAsync(clientId, null);
        }
        
        /// <remarks/>
        public void DeleteClientAsync(int clientId, object userState) {
            if ((this.DeleteClientOperationCompleted == null)) {
                this.DeleteClientOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteClientOperationCompleted);
            }
            this.InvokeAsync("DeleteClient", new object[] {
                        clientId}, this.DeleteClientOperationCompleted, userState);
        }
        
        private void OnDeleteClientOperationCompleted(object arg) {
            if ((this.DeleteClientCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteClientCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ClientHasActiveLicenses", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ClientHasActiveLicenses(int clientId) {
            object[] results = this.Invoke("ClientHasActiveLicenses", new object[] {
                        clientId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ClientHasActiveLicensesAsync(int clientId) {
            this.ClientHasActiveLicensesAsync(clientId, null);
        }
        
        /// <remarks/>
        public void ClientHasActiveLicensesAsync(int clientId, object userState) {
            if ((this.ClientHasActiveLicensesOperationCompleted == null)) {
                this.ClientHasActiveLicensesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnClientHasActiveLicensesOperationCompleted);
            }
            this.InvokeAsync("ClientHasActiveLicenses", new object[] {
                        clientId}, this.ClientHasActiveLicensesOperationCompleted, userState);
        }
        
        private void OnClientHasActiveLicensesOperationCompleted(object arg) {
            if ((this.ClientHasActiveLicensesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ClientHasActiveLicensesCompleted(this, new ClientHasActiveLicensesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateClient", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int CreateClient(string clientName, string salesForceId) {
            object[] results = this.Invoke("CreateClient", new object[] {
                        clientName,
                        salesForceId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CreateClientAsync(string clientName, string salesForceId) {
            this.CreateClientAsync(clientName, salesForceId, null);
        }
        
        /// <remarks/>
        public void CreateClientAsync(string clientName, string salesForceId, object userState) {
            if ((this.CreateClientOperationCompleted == null)) {
                this.CreateClientOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateClientOperationCompleted);
            }
            this.InvokeAsync("CreateClient", new object[] {
                        clientName,
                        salesForceId}, this.CreateClientOperationCompleted, userState);
        }
        
        private void OnCreateClientOperationCompleted(object arg) {
            if ((this.CreateClientCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateClientCompleted(this, new CreateClientCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SaveClient", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SaveClient(int clientId, string clientName, string salesForceId) {
            object[] results = this.Invoke("SaveClient", new object[] {
                        clientId,
                        clientName,
                        salesForceId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SaveClientAsync(int clientId, string clientName, string salesForceId) {
            this.SaveClientAsync(clientId, clientName, salesForceId, null);
        }
        
        /// <remarks/>
        public void SaveClientAsync(int clientId, string clientName, string salesForceId, object userState) {
            if ((this.SaveClientOperationCompleted == null)) {
                this.SaveClientOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveClientOperationCompleted);
            }
            this.InvokeAsync("SaveClient", new object[] {
                        clientId,
                        clientName,
                        salesForceId}, this.SaveClientOperationCompleted, userState);
        }
        
        private void OnSaveClientOperationCompleted(object arg) {
            if ((this.SaveClientCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveClientCompleted(this, new SaveClientCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetClientById", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Client GetClientById(int clientId) {
            object[] results = this.Invoke("GetClientById", new object[] {
                        clientId});
            return ((Client)(results[0]));
        }
        
        /// <remarks/>
        public void GetClientByIdAsync(int clientId) {
            this.GetClientByIdAsync(clientId, null);
        }
        
        /// <remarks/>
        public void GetClientByIdAsync(int clientId, object userState) {
            if ((this.GetClientByIdOperationCompleted == null)) {
                this.GetClientByIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetClientByIdOperationCompleted);
            }
            this.InvokeAsync("GetClientById", new object[] {
                        clientId}, this.GetClientByIdOperationCompleted, userState);
        }
        
        private void OnGetClientByIdOperationCompleted(object arg) {
            if ((this.GetClientByIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetClientByIdCompleted(this, new GetClientByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAllClients", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Client[] GetAllClients() {
            object[] results = this.Invoke("GetAllClients", new object[0]);
            return ((Client[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllClientsAsync() {
            this.GetAllClientsAsync(null);
        }
        
        /// <remarks/>
        public void GetAllClientsAsync(object userState) {
            if ((this.GetAllClientsOperationCompleted == null)) {
                this.GetAllClientsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllClientsOperationCompleted);
            }
            this.InvokeAsync("GetAllClients", new object[0], this.GetAllClientsOperationCompleted, userState);
        }
        
        private void OnGetAllClientsOperationCompleted(object arg) {
            if ((this.GetAllClientsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllClientsCompleted(this, new GetAllClientsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteSite", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteSite(int siteId) {
            this.Invoke("DeleteSite", new object[] {
                        siteId});
        }
        
        /// <remarks/>
        public void DeleteSiteAsync(int siteId) {
            this.DeleteSiteAsync(siteId, null);
        }
        
        /// <remarks/>
        public void DeleteSiteAsync(int siteId, object userState) {
            if ((this.DeleteSiteOperationCompleted == null)) {
                this.DeleteSiteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteSiteOperationCompleted);
            }
            this.InvokeAsync("DeleteSite", new object[] {
                        siteId}, this.DeleteSiteOperationCompleted, userState);
        }
        
        private void OnDeleteSiteOperationCompleted(object arg) {
            if ((this.DeleteSiteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteSiteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SiteHasActiveLicenses", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SiteHasActiveLicenses(int siteId) {
            object[] results = this.Invoke("SiteHasActiveLicenses", new object[] {
                        siteId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SiteHasActiveLicensesAsync(int siteId) {
            this.SiteHasActiveLicensesAsync(siteId, null);
        }
        
        /// <remarks/>
        public void SiteHasActiveLicensesAsync(int siteId, object userState) {
            if ((this.SiteHasActiveLicensesOperationCompleted == null)) {
                this.SiteHasActiveLicensesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSiteHasActiveLicensesOperationCompleted);
            }
            this.InvokeAsync("SiteHasActiveLicenses", new object[] {
                        siteId}, this.SiteHasActiveLicensesOperationCompleted, userState);
        }
        
        private void OnSiteHasActiveLicensesOperationCompleted(object arg) {
            if ((this.SiteHasActiveLicensesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SiteHasActiveLicensesCompleted(this, new SiteHasActiveLicensesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateSite", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int CreateSite(int clientId, string siteName, string salesForceId) {
            object[] results = this.Invoke("CreateSite", new object[] {
                        clientId,
                        siteName,
                        salesForceId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CreateSiteAsync(int clientId, string siteName, string salesForceId) {
            this.CreateSiteAsync(clientId, siteName, salesForceId, null);
        }
        
        /// <remarks/>
        public void CreateSiteAsync(int clientId, string siteName, string salesForceId, object userState) {
            if ((this.CreateSiteOperationCompleted == null)) {
                this.CreateSiteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateSiteOperationCompleted);
            }
            this.InvokeAsync("CreateSite", new object[] {
                        clientId,
                        siteName,
                        salesForceId}, this.CreateSiteOperationCompleted, userState);
        }
        
        private void OnCreateSiteOperationCompleted(object arg) {
            if ((this.CreateSiteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateSiteCompleted(this, new CreateSiteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SaveSite", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SaveSite(int siteId, int clientId, string siteName, string salesForceId) {
            object[] results = this.Invoke("SaveSite", new object[] {
                        siteId,
                        clientId,
                        siteName,
                        salesForceId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SaveSiteAsync(int siteId, int clientId, string siteName, string salesForceId) {
            this.SaveSiteAsync(siteId, clientId, siteName, salesForceId, null);
        }
        
        /// <remarks/>
        public void SaveSiteAsync(int siteId, int clientId, string siteName, string salesForceId, object userState) {
            if ((this.SaveSiteOperationCompleted == null)) {
                this.SaveSiteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveSiteOperationCompleted);
            }
            this.InvokeAsync("SaveSite", new object[] {
                        siteId,
                        clientId,
                        siteName,
                        salesForceId}, this.SaveSiteOperationCompleted, userState);
        }
        
        private void OnSaveSiteOperationCompleted(object arg) {
            if ((this.SaveSiteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveSiteCompleted(this, new SaveSiteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSiteById", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Site GetSiteById(int siteId) {
            object[] results = this.Invoke("GetSiteById", new object[] {
                        siteId});
            return ((Site)(results[0]));
        }
        
        /// <remarks/>
        public void GetSiteByIdAsync(int siteId) {
            this.GetSiteByIdAsync(siteId, null);
        }
        
        /// <remarks/>
        public void GetSiteByIdAsync(int siteId, object userState) {
            if ((this.GetSiteByIdOperationCompleted == null)) {
                this.GetSiteByIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSiteByIdOperationCompleted);
            }
            this.InvokeAsync("GetSiteById", new object[] {
                        siteId}, this.GetSiteByIdOperationCompleted, userState);
        }
        
        private void OnGetSiteByIdOperationCompleted(object arg) {
            if ((this.GetSiteByIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSiteByIdCompleted(this, new GetSiteByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAllSites", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Site[] GetAllSites() {
            object[] results = this.Invoke("GetAllSites", new object[0]);
            return ((Site[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllSitesAsync() {
            this.GetAllSitesAsync(null);
        }
        
        /// <remarks/>
        public void GetAllSitesAsync(object userState) {
            if ((this.GetAllSitesOperationCompleted == null)) {
                this.GetAllSitesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllSitesOperationCompleted);
            }
            this.InvokeAsync("GetAllSites", new object[0], this.GetAllSitesOperationCompleted, userState);
        }
        
        private void OnGetAllSitesOperationCompleted(object arg) {
            if ((this.GetAllSitesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllSitesCompleted(this, new GetAllSitesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAllSitesByClientId", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Site[] GetAllSitesByClientId(int clientId) {
            object[] results = this.Invoke("GetAllSitesByClientId", new object[] {
                        clientId});
            return ((Site[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllSitesByClientIdAsync(int clientId) {
            this.GetAllSitesByClientIdAsync(clientId, null);
        }
        
        /// <remarks/>
        public void GetAllSitesByClientIdAsync(int clientId, object userState) {
            if ((this.GetAllSitesByClientIdOperationCompleted == null)) {
                this.GetAllSitesByClientIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllSitesByClientIdOperationCompleted);
            }
            this.InvokeAsync("GetAllSitesByClientId", new object[] {
                        clientId}, this.GetAllSitesByClientIdOperationCompleted, userState);
        }
        
        private void OnGetAllSitesByClientIdOperationCompleted(object arg) {
            if ((this.GetAllSitesByClientIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllSitesByClientIdCompleted(this, new GetAllSitesByClientIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class Activation {
        
        private int idField;
        
        private int licenseIDField;
        
        private string cPUIDField;
        
        private System.DateTime expirationDateField;
        
        private string activationCodeField;
        
        private string generatedByField;
        
        private System.DateTime generatedTimeField;
        
        private bool isActivatedField;
        
        private bool enabledField;
        
        /// <remarks/>
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public int LicenseID {
            get {
                return this.licenseIDField;
            }
            set {
                this.licenseIDField = value;
            }
        }
        
        /// <remarks/>
        public string CPUID {
            get {
                return this.cPUIDField;
            }
            set {
                this.cPUIDField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime ExpirationDate {
            get {
                return this.expirationDateField;
            }
            set {
                this.expirationDateField = value;
            }
        }
        
        /// <remarks/>
        public string ActivationCode {
            get {
                return this.activationCodeField;
            }
            set {
                this.activationCodeField = value;
            }
        }
        
        /// <remarks/>
        public string GeneratedBy {
            get {
                return this.generatedByField;
            }
            set {
                this.generatedByField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime GeneratedTime {
            get {
                return this.generatedTimeField;
            }
            set {
                this.generatedTimeField = value;
            }
        }
        
        /// <remarks/>
        public bool IsActivated {
            get {
                return this.isActivatedField;
            }
            set {
                this.isActivatedField = value;
            }
        }
        
        /// <remarks/>
        public bool Enabled {
            get {
                return this.enabledField;
            }
            set {
                this.enabledField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class Site {
        
        private int idField;
        
        private int clientIDField;
        
        private string siteNameField;
        
        private string salesForceIdField;
        
        /// <remarks/>
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public int ClientID {
            get {
                return this.clientIDField;
            }
            set {
                this.clientIDField = value;
            }
        }
        
        /// <remarks/>
        public string SiteName {
            get {
                return this.siteNameField;
            }
            set {
                this.siteNameField = value;
            }
        }
        
        /// <remarks/>
        public string SalesForceId {
            get {
                return this.salesForceIdField;
            }
            set {
                this.salesForceIdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class Client {
        
        private int idField;
        
        private string clientNameField;
        
        private int numberOfSitesField;
        
        private string salesForceIdField;
        
        /// <remarks/>
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string ClientName {
            get {
                return this.clientNameField;
            }
            set {
                this.clientNameField = value;
            }
        }
        
        /// <remarks/>
        public int NumberOfSites {
            get {
                return this.numberOfSitesField;
            }
            set {
                this.numberOfSitesField = value;
            }
        }
        
        /// <remarks/>
        public string SalesForceId {
            get {
                return this.salesForceIdField;
            }
            set {
                this.salesForceIdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class License {
        
        private int idField;
        
        private int siteIDField;
        
        private int clientIDField;
        
        private string licenseIDField;
        
        private int productField;
        
        private int licenseTypeField;
        
        private string generatedByField;
        
        private System.DateTime generatedTimeField;
        
        /// <remarks/>
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public int SiteID {
            get {
                return this.siteIDField;
            }
            set {
                this.siteIDField = value;
            }
        }
        
        /// <remarks/>
        public int ClientID {
            get {
                return this.clientIDField;
            }
            set {
                this.clientIDField = value;
            }
        }
        
        /// <remarks/>
        public string LicenseID {
            get {
                return this.licenseIDField;
            }
            set {
                this.licenseIDField = value;
            }
        }
        
        /// <remarks/>
        public int Product {
            get {
                return this.productField;
            }
            set {
                this.productField = value;
            }
        }
        
        /// <remarks/>
        public int LicenseType {
            get {
                return this.licenseTypeField;
            }
            set {
                this.licenseTypeField = value;
            }
        }
        
        /// <remarks/>
        public string GeneratedBy {
            get {
                return this.generatedByField;
            }
            set {
                this.generatedByField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime GeneratedTime {
            get {
                return this.generatedTimeField;
            }
            set {
                this.generatedTimeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class LicenseFeaturesParams {
        
        private int clientIDField;
        
        private int siteIDField;
        
        private string clientNameField;
        
        private string siteNameField;
        
        private string generatedByField;
        
        private System.DateTime generatedDateField;
        
        private int licenseIDField;
        
        private LicenseType licenseTypeField;
        
        private string licenseKeyField;
        
        private int productField;
        
        private System.DateTime expirationDateField;
        
        private System.DateTime extendedExpirationDateField;
        
        private System.DateTime expirationWarningStartDateField;
        
        private ExpirationWarningType expirationWarningsModeField;
        
        private int expirationWarningsFrequencyField;
        
        private string expirationWarningsUnitField;
        
        private AllowedWasteClassesType allowedWasteClasssesField;
        
        private string productVersionNameField;
        
        private DefaultUserLevelType defaultUserLevelField;
        
        private string managerPasswordField;
        
        private string administratorPasswordField;
        
        private bool configuratorInstalledField;
        
        private bool useConfiguratorField;
        
        private int numberOfSitesField;
        
        private bool manageTypesAvailableField;
        
        private bool addUsersField;
        
        private bool removeUsersField;
        
        private bool manageTrackersField;
        
        private bool manageSitesField;
        
        private bool manageEventTypesField;
        
        private bool manageEventClientsField;
        
        private bool manageEventOrdersField;
        
        private int trackerLimitField;
        
        private int foodTypeLimitField;
        
        private bool foodCostAdjustmentsField;
        
        private int lossTypeLimitField;
        
        private int userTypeLimitField;
        
        private bool managePreferencesField;
        
        private bool manageBaselinesField;
        
        private bool updateTrackerField;
        
        private bool importWasteDataField;
        
        private bool recurringTransactionsAvailableField;
        
        private bool enterLogSheetDataField;
        
        private bool manageLogFormsField;
        
        private bool manageDataEntryTemplatesField;
        
        private int detLimitsField;
        
        private bool configureStationEntryField;
        
        private bool configureDaypartEntryField;
        
        private bool configureDispositionEntryField;
        
        private bool configurePrePostEntryField;
        
        private bool stationEntryField;
        
        private bool daypartEntryField;
        
        private bool dispositionEntryField;
        
        private bool prePostEntryField;
        
        private bool advancedMenuAvailableField;
        
        private bool enterFinancialsAvailableField;
        
        private bool enterSWATNotesAvailableField;
        
        private bool manageReportsSettingsShortcutField;
        
        private int reportLimitsField;
        
        private bool addNewReportField;
        
        private bool addNewCollectionField;
        
        private bool cloneField;
        
        private string supportEmailAddressField;
        
        private bool showSupportEmailAddressField;
        
        private string supportPhoneNumberField;
        
        private bool showSupportPhoneNumberField;
        
        private string supportWebSiteURLField;
        
        private bool showSupportWebSiteURLField;
        
        /// <remarks/>
        public int ClientID {
            get {
                return this.clientIDField;
            }
            set {
                this.clientIDField = value;
            }
        }
        
        /// <remarks/>
        public int SiteID {
            get {
                return this.siteIDField;
            }
            set {
                this.siteIDField = value;
            }
        }
        
        /// <remarks/>
        public string ClientName {
            get {
                return this.clientNameField;
            }
            set {
                this.clientNameField = value;
            }
        }
        
        /// <remarks/>
        public string SiteName {
            get {
                return this.siteNameField;
            }
            set {
                this.siteNameField = value;
            }
        }
        
        /// <remarks/>
        public string GeneratedBy {
            get {
                return this.generatedByField;
            }
            set {
                this.generatedByField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime GeneratedDate {
            get {
                return this.generatedDateField;
            }
            set {
                this.generatedDateField = value;
            }
        }
        
        /// <remarks/>
        public int LicenseID {
            get {
                return this.licenseIDField;
            }
            set {
                this.licenseIDField = value;
            }
        }
        
        /// <remarks/>
        public LicenseType LicenseType {
            get {
                return this.licenseTypeField;
            }
            set {
                this.licenseTypeField = value;
            }
        }
        
        /// <remarks/>
        public string LicenseKey {
            get {
                return this.licenseKeyField;
            }
            set {
                this.licenseKeyField = value;
            }
        }
        
        /// <remarks/>
        public int Product {
            get {
                return this.productField;
            }
            set {
                this.productField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime ExpirationDate {
            get {
                return this.expirationDateField;
            }
            set {
                this.expirationDateField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime ExtendedExpirationDate {
            get {
                return this.extendedExpirationDateField;
            }
            set {
                this.extendedExpirationDateField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime ExpirationWarningStartDate {
            get {
                return this.expirationWarningStartDateField;
            }
            set {
                this.expirationWarningStartDateField = value;
            }
        }
        
        /// <remarks/>
        public ExpirationWarningType ExpirationWarningsMode {
            get {
                return this.expirationWarningsModeField;
            }
            set {
                this.expirationWarningsModeField = value;
            }
        }
        
        /// <remarks/>
        public int ExpirationWarningsFrequency {
            get {
                return this.expirationWarningsFrequencyField;
            }
            set {
                this.expirationWarningsFrequencyField = value;
            }
        }
        
        /// <remarks/>
        public string ExpirationWarningsUnit {
            get {
                return this.expirationWarningsUnitField;
            }
            set {
                this.expirationWarningsUnitField = value;
            }
        }
        
        /// <remarks/>
        public AllowedWasteClassesType AllowedWasteClassses {
            get {
                return this.allowedWasteClasssesField;
            }
            set {
                this.allowedWasteClasssesField = value;
            }
        }
        
        /// <remarks/>
        public string ProductVersionName {
            get {
                return this.productVersionNameField;
            }
            set {
                this.productVersionNameField = value;
            }
        }
        
        /// <remarks/>
        public DefaultUserLevelType DefaultUserLevel {
            get {
                return this.defaultUserLevelField;
            }
            set {
                this.defaultUserLevelField = value;
            }
        }
        
        /// <remarks/>
        public string ManagerPassword {
            get {
                return this.managerPasswordField;
            }
            set {
                this.managerPasswordField = value;
            }
        }
        
        /// <remarks/>
        public string AdministratorPassword {
            get {
                return this.administratorPasswordField;
            }
            set {
                this.administratorPasswordField = value;
            }
        }
        
        /// <remarks/>
        public bool ConfiguratorInstalled {
            get {
                return this.configuratorInstalledField;
            }
            set {
                this.configuratorInstalledField = value;
            }
        }
        
        /// <remarks/>
        public bool UseConfigurator {
            get {
                return this.useConfiguratorField;
            }
            set {
                this.useConfiguratorField = value;
            }
        }
        
        /// <remarks/>
        public int NumberOfSites {
            get {
                return this.numberOfSitesField;
            }
            set {
                this.numberOfSitesField = value;
            }
        }
        
        /// <remarks/>
        public bool ManageTypesAvailable {
            get {
                return this.manageTypesAvailableField;
            }
            set {
                this.manageTypesAvailableField = value;
            }
        }
        
        /// <remarks/>
        public bool AddUsers {
            get {
                return this.addUsersField;
            }
            set {
                this.addUsersField = value;
            }
        }
        
        /// <remarks/>
        public bool RemoveUsers {
            get {
                return this.removeUsersField;
            }
            set {
                this.removeUsersField = value;
            }
        }
        
        /// <remarks/>
        public bool ManageTrackers {
            get {
                return this.manageTrackersField;
            }
            set {
                this.manageTrackersField = value;
            }
        }
        
        /// <remarks/>
        public bool ManageSites {
            get {
                return this.manageSitesField;
            }
            set {
                this.manageSitesField = value;
            }
        }
        
        /// <remarks/>
        public bool ManageEventTypes {
            get {
                return this.manageEventTypesField;
            }
            set {
                this.manageEventTypesField = value;
            }
        }
        
        /// <remarks/>
        public bool ManageEventClients {
            get {
                return this.manageEventClientsField;
            }
            set {
                this.manageEventClientsField = value;
            }
        }
        
        /// <remarks/>
        public bool ManageEventOrders {
            get {
                return this.manageEventOrdersField;
            }
            set {
                this.manageEventOrdersField = value;
            }
        }
        
        /// <remarks/>
        public int TrackerLimit {
            get {
                return this.trackerLimitField;
            }
            set {
                this.trackerLimitField = value;
            }
        }
        
        /// <remarks/>
        public int FoodTypeLimit {
            get {
                return this.foodTypeLimitField;
            }
            set {
                this.foodTypeLimitField = value;
            }
        }
        
        /// <remarks/>
        public bool FoodCostAdjustments {
            get {
                return this.foodCostAdjustmentsField;
            }
            set {
                this.foodCostAdjustmentsField = value;
            }
        }
        
        /// <remarks/>
        public int LossTypeLimit {
            get {
                return this.lossTypeLimitField;
            }
            set {
                this.lossTypeLimitField = value;
            }
        }
        
        /// <remarks/>
        public int UserTypeLimit {
            get {
                return this.userTypeLimitField;
            }
            set {
                this.userTypeLimitField = value;
            }
        }
        
        /// <remarks/>
        public bool ManagePreferences {
            get {
                return this.managePreferencesField;
            }
            set {
                this.managePreferencesField = value;
            }
        }
        
        /// <remarks/>
        public bool ManageBaselines {
            get {
                return this.manageBaselinesField;
            }
            set {
                this.manageBaselinesField = value;
            }
        }
        
        /// <remarks/>
        public bool UpdateTracker {
            get {
                return this.updateTrackerField;
            }
            set {
                this.updateTrackerField = value;
            }
        }
        
        /// <remarks/>
        public bool ImportWasteData {
            get {
                return this.importWasteDataField;
            }
            set {
                this.importWasteDataField = value;
            }
        }
        
        /// <remarks/>
        public bool RecurringTransactionsAvailable {
            get {
                return this.recurringTransactionsAvailableField;
            }
            set {
                this.recurringTransactionsAvailableField = value;
            }
        }
        
        /// <remarks/>
        public bool EnterLogSheetData {
            get {
                return this.enterLogSheetDataField;
            }
            set {
                this.enterLogSheetDataField = value;
            }
        }
        
        /// <remarks/>
        public bool ManageLogForms {
            get {
                return this.manageLogFormsField;
            }
            set {
                this.manageLogFormsField = value;
            }
        }
        
        /// <remarks/>
        public bool ManageDataEntryTemplates {
            get {
                return this.manageDataEntryTemplatesField;
            }
            set {
                this.manageDataEntryTemplatesField = value;
            }
        }
        
        /// <remarks/>
        public int DetLimits {
            get {
                return this.detLimitsField;
            }
            set {
                this.detLimitsField = value;
            }
        }
        
        /// <remarks/>
        public bool ConfigureStationEntry {
            get {
                return this.configureStationEntryField;
            }
            set {
                this.configureStationEntryField = value;
            }
        }
        
        /// <remarks/>
        public bool ConfigureDaypartEntry {
            get {
                return this.configureDaypartEntryField;
            }
            set {
                this.configureDaypartEntryField = value;
            }
        }
        
        /// <remarks/>
        public bool ConfigureDispositionEntry {
            get {
                return this.configureDispositionEntryField;
            }
            set {
                this.configureDispositionEntryField = value;
            }
        }
        
        /// <remarks/>
        public bool ConfigurePrePostEntry {
            get {
                return this.configurePrePostEntryField;
            }
            set {
                this.configurePrePostEntryField = value;
            }
        }
        
        /// <remarks/>
        public bool StationEntry {
            get {
                return this.stationEntryField;
            }
            set {
                this.stationEntryField = value;
            }
        }
        
        /// <remarks/>
        public bool DaypartEntry {
            get {
                return this.daypartEntryField;
            }
            set {
                this.daypartEntryField = value;
            }
        }
        
        /// <remarks/>
        public bool DispositionEntry {
            get {
                return this.dispositionEntryField;
            }
            set {
                this.dispositionEntryField = value;
            }
        }
        
        /// <remarks/>
        public bool PrePostEntry {
            get {
                return this.prePostEntryField;
            }
            set {
                this.prePostEntryField = value;
            }
        }
        
        /// <remarks/>
        public bool AdvancedMenuAvailable {
            get {
                return this.advancedMenuAvailableField;
            }
            set {
                this.advancedMenuAvailableField = value;
            }
        }
        
        /// <remarks/>
        public bool EnterFinancialsAvailable {
            get {
                return this.enterFinancialsAvailableField;
            }
            set {
                this.enterFinancialsAvailableField = value;
            }
        }
        
        /// <remarks/>
        public bool EnterSWATNotesAvailable {
            get {
                return this.enterSWATNotesAvailableField;
            }
            set {
                this.enterSWATNotesAvailableField = value;
            }
        }
        
        /// <remarks/>
        public bool ManageReportsSettingsShortcut {
            get {
                return this.manageReportsSettingsShortcutField;
            }
            set {
                this.manageReportsSettingsShortcutField = value;
            }
        }
        
        /// <remarks/>
        public int ReportLimits {
            get {
                return this.reportLimitsField;
            }
            set {
                this.reportLimitsField = value;
            }
        }
        
        /// <remarks/>
        public bool AddNewReport {
            get {
                return this.addNewReportField;
            }
            set {
                this.addNewReportField = value;
            }
        }
        
        /// <remarks/>
        public bool AddNewCollection {
            get {
                return this.addNewCollectionField;
            }
            set {
                this.addNewCollectionField = value;
            }
        }
        
        /// <remarks/>
        public bool Clone {
            get {
                return this.cloneField;
            }
            set {
                this.cloneField = value;
            }
        }
        
        /// <remarks/>
        public string SupportEmailAddress {
            get {
                return this.supportEmailAddressField;
            }
            set {
                this.supportEmailAddressField = value;
            }
        }
        
        /// <remarks/>
        public bool ShowSupportEmailAddress {
            get {
                return this.showSupportEmailAddressField;
            }
            set {
                this.showSupportEmailAddressField = value;
            }
        }
        
        /// <remarks/>
        public string SupportPhoneNumber {
            get {
                return this.supportPhoneNumberField;
            }
            set {
                this.supportPhoneNumberField = value;
            }
        }
        
        /// <remarks/>
        public bool ShowSupportPhoneNumber {
            get {
                return this.showSupportPhoneNumberField;
            }
            set {
                this.showSupportPhoneNumberField = value;
            }
        }
        
        /// <remarks/>
        public string SupportWebSiteURL {
            get {
                return this.supportWebSiteURLField;
            }
            set {
                this.supportWebSiteURLField = value;
            }
        }
        
        /// <remarks/>
        public bool ShowSupportWebSiteURL {
            get {
                return this.showSupportWebSiteURLField;
            }
            set {
                this.showSupportWebSiteURLField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public enum LicenseType {
        
        /// <remarks/>
        Site,
        
        /// <remarks/>
        CPU,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public enum ExpirationWarningType {
        
        /// <remarks/>
        OnProgramStart,
        
        /// <remarks/>
        OnProgramExit,
        
        /// <remarks/>
        OnProgramStartAndExit,
        
        /// <remarks/>
        DuringOperation,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public enum AllowedWasteClassesType {
        
        /// <remarks/>
        Food,
        
        /// <remarks/>
        NonFood,
        
        /// <remarks/>
        AllWasteClasses,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public enum DefaultUserLevelType {
        
        /// <remarks/>
        User,
        
        /// <remarks/>
        Manager,
        
        /// <remarks/>
        Administrator,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class ActivationParams {
        
        private int idField;
        
        private int licenseIDField;
        
        private string cPUIDField;
        
        private System.DateTime expirationDateField;
        
        private System.DateTime expirationWarningsBeginDateField;
        
        private string activationCodeField;
        
        private string generatedByField;
        
        private System.DateTime generatedTimeField;
        
        private bool isActivatedField;
        
        private bool enabledField;
        
        /// <remarks/>
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public int LicenseID {
            get {
                return this.licenseIDField;
            }
            set {
                this.licenseIDField = value;
            }
        }
        
        /// <remarks/>
        public string CPUID {
            get {
                return this.cPUIDField;
            }
            set {
                this.cPUIDField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime ExpirationDate {
            get {
                return this.expirationDateField;
            }
            set {
                this.expirationDateField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime ExpirationWarningsBeginDate {
            get {
                return this.expirationWarningsBeginDateField;
            }
            set {
                this.expirationWarningsBeginDateField = value;
            }
        }
        
        /// <remarks/>
        public string ActivationCode {
            get {
                return this.activationCodeField;
            }
            set {
                this.activationCodeField = value;
            }
        }
        
        /// <remarks/>
        public string GeneratedBy {
            get {
                return this.generatedByField;
            }
            set {
                this.generatedByField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime GeneratedTime {
            get {
                return this.generatedTimeField;
            }
            set {
                this.generatedTimeField = value;
            }
        }
        
        /// <remarks/>
        public bool IsActivated {
            get {
                return this.isActivatedField;
            }
            set {
                this.isActivatedField = value;
            }
        }
        
        /// <remarks/>
        public bool Enabled {
            get {
                return this.enabledField;
            }
            set {
                this.enabledField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ActivateLicenseCompletedEventHandler(object sender, ActivateLicenseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ActivateLicenseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ActivateLicenseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Activation Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Activation)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AddActivationCompletedEventHandler(object sender, AddActivationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddActivationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddActivationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetActivationByIdCompletedEventHandler(object sender, GetActivationByIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetActivationByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetActivationByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Activation Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Activation)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SaveActivationCodeCompletedEventHandler(object sender, SaveActivationCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveActivationCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveActivationCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SaveActivationCompletedEventHandler(object sender, SaveActivationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveActivationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveActivationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetActivationsByLicenseIdCompletedEventHandler(object sender, GetActivationsByLicenseIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetActivationsByLicenseIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetActivationsByLicenseIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Activation[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Activation[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void IsActivatedCompletedEventHandler(object sender, IsActivatedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsActivatedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsActivatedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CreateLicenseCompletedEventHandler(object sender, CreateLicenseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateLicenseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateLicenseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SaveLicenseCompletedEventHandler(object sender, SaveLicenseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveLicenseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveLicenseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetLicenseByIdCompletedEventHandler(object sender, GetLicenseByIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLicenseByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLicenseByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public License Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((License)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetLicenseFeatureParamsCompletedEventHandler(object sender, GetLicenseFeatureParamsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLicenseFeatureParamsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLicenseFeatureParamsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LicenseFeaturesParams Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LicenseFeaturesParams)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetAllLicensesCompletedEventHandler(object sender, GetAllLicensesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllLicensesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllLicensesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public License[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((License[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetLicensesByClientIdCompletedEventHandler(object sender, GetLicensesByClientIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLicensesByClientIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLicensesByClientIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public License[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((License[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetLicensesByClientIdAndSiteIdCompletedEventHandler(object sender, GetLicensesByClientIdAndSiteIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLicensesByClientIdAndSiteIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLicensesByClientIdAndSiteIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public License[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((License[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DeleteClientCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ClientHasActiveLicensesCompletedEventHandler(object sender, ClientHasActiveLicensesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ClientHasActiveLicensesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ClientHasActiveLicensesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CreateClientCompletedEventHandler(object sender, CreateClientCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateClientCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateClientCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SaveClientCompletedEventHandler(object sender, SaveClientCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveClientCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveClientCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetClientByIdCompletedEventHandler(object sender, GetClientByIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetClientByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetClientByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Client Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Client)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetAllClientsCompletedEventHandler(object sender, GetAllClientsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllClientsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllClientsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Client[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Client[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DeleteSiteCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SiteHasActiveLicensesCompletedEventHandler(object sender, SiteHasActiveLicensesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SiteHasActiveLicensesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SiteHasActiveLicensesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CreateSiteCompletedEventHandler(object sender, CreateSiteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateSiteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateSiteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SaveSiteCompletedEventHandler(object sender, SaveSiteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveSiteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveSiteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetSiteByIdCompletedEventHandler(object sender, GetSiteByIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSiteByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSiteByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Site Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Site)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetAllSitesCompletedEventHandler(object sender, GetAllSitesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllSitesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllSitesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Site[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Site[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetAllSitesByClientIdCompletedEventHandler(object sender, GetAllSitesByClientIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllSitesByClientIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllSitesByClientIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Site[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Site[])(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591